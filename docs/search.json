[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BSC_project_IPFS2023",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n\n\n\n\n  \n\n\n\n\nWeek5: Grain development II\n\n\n\n\n\n\n\n\n\n\n\n\nMay 16, 2023\n\n\nTien-Cheng\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek4: Grain development I\n\n\n\n\n\n\n\n\n\n\n\n\nMay 9, 2023\n\n\nTien-Cheng\n\n\n\n\n\n\n  \n\n\n\n\nWeek3: Floret development\n\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2023\n\n\nTien-Cheng\n\n\n\n\n\n\n  \n\n\n\n\nWeek2: The growth of spike in winter wheat\n\n\n\n\n\n\n\n\n\n\n\n\nApr 25, 2023\n\n\nTien-Cheng\n\n\n\n\n\n\n  \n\n\n\n\nWeek1: Phenology and the growth of spike\n\n\n\n\n\n\n\n\n\n\n\n\nApr 18, 2023\n\n\nTien-Cheng\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This blog was build for the IPFS BSC project course 2023 summer semester."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Week1/index.html",
    "href": "posts/Week1/index.html",
    "title": "Week1: Phenology and the growth of spike",
    "section": "",
    "text": "Welcome to the first course! During the following 2 hrs, you will learn data type of vectors, function and %>%.\n\n\n\n\n\n\nNote\n\n\n\n\n4 basic data types: (“chr”,“numeric”,“logical”,“Date”)\nfunctions, documentation and data type check\nmeaning of %>% and .\n\nindexing with pattern matching\n\n\n\nPlease make sure you have installed R & Rstudio.\nDownload the folder from HU-box.\nOpen Ear_development_BSC_project.Rproj\n\n\nPress Ctrl+ Shift +Nto open new script.Save it as Week1_practice.R Copy code from this website to your script and press run.\nSave ### Concept of datatype & case sensitive Rules:\n\nDon’t compete your variable names with system. (eg., var,mean,aov)\n\nsomething that will show in the drop down menu of auto-completion.\n\nDon’t start with number.\nSeparate long name with _.\n\n\nvariable\n# assignment str\"v\" to name \"variable\"\n## \"\" and unquote str and variable \n\nvariable <- \"v\"\nVariable <- 1\nvariable +1\nVariable +1 \n\n\n\n\n# str??\nstr\n?str\nstr(variable)\nstr(Variable)\n# data type coersion\nstr(NA)\nstr(c(NA,1))\nstr(c(NA,\"a\"))\nstr(c(NA,TRUE))\nstr(c(1,\"a\"))\n\n\n\n\nCheck this great package tidyverse!\n\nNote that windows user may need to first download the Rtools that match your R version.\n\nYou can check your R version by typing version() in your R console.\n\ninstall.packages(tidyrverse)\ninstall.packages(\"tidyrverse\")\nlibrary(dplyr)\n\n\n\n\nPipe (%>%) is available in r-package either dplyr or magrittr.\nPlease use %>% to avoid embedded functions.\n.stands for the result from the left side of the pipe.\nFor long line code, press enter after each %>%.\nSelect all the codes by ctrl A.\nIndent the selected codes by ctrl I.\n\n# syntax of using pipe\n\nfun1(object)\n\nobject %>% fun1(.)\nobject %>% fun1()\nobject %>% fun1() %>% .\nobject %>% fun1(.) %>% .\n\n#embedded functions\nfun2(fun1(object))\n# pipe\nobject %>% \n  fun1() %>% \n  fun2()\n\n\n# how many ways of creating a sequence?\nc(1,2,3)\nseq(1,3,1)\n\n# embedded function : fun2(fun1())\nlength(c(1,2,3))\n# use pipe, \".\" is the result of previous step\nc(1,2,3) %>% length(.)\n\n# replicate element as vector\nrep(1,3)\n# remove duplicates\nrep(1,3) %>% unique()\n# cumulative sum \nrep(1,3) %>% cumsum()\n\n# is there any difference?\npaste(c(\"a\",\"1\"),collapse = \"\")\npaste0(c(\"a\",\"1\"))\npaste0(\"a\",\"1\")\n\n\n\n\n\n\n\nChallenge\n\n\n\nUse str() to check the data type of above line.\nYou have two vectors, c(\"a\",\"b\") and c(\"1\",\"2\")\nHow to use paste and repto create sequence of char vector shown below?\nCheck the arguments of rep to get more hints. e.g.,\nrep(c(\"a\",\"b\"),each=2)\nrep(c(\"a\",\"b\"),times=2)\n\n\n\n\n[1] \"a1\" \"a2\" \"b1\" \"b2\"\n\n\n[1] \"a1\" \"b1\" \"a2\" \"b2\"\n\n\n\n\n\nformat: function_name(argument1, argument2) {code} example:\n\nplusone <- function(x){\n  x+1\n}\n# is function data type sensitive?\nplusone(variable)\nplusone(Variable) \n\nfunction with good documentation example:\n\nfunction_name  <-function(input){\n  # input: datatype, length, meaning.\n  # output: datatype, length, meaning.\n  # action1: intermediate_variable <- input %>% fun1()\n  # action2: output <-intermediate_variable%>% fun2()\n  ...\n  return(output)\n}\n\n\n\n\n\n\n\nChallenge\n\n\n\nwrite a function with documentation: input vec is a numeric vector with length 3, return str of average value of vec ± standard deviation of vec.\nVisualize the step in your function by first writing your the possible steps in text!\n\n\n\n\n\n\nas.Date(\"2023-04-17\")\nas.Date(\"2023-04-17\",format=\"%Y-%m-%d\")\n# is ther any error?\nas.Date(\"20230417\")\nas.Date(\"17042023\")\n# additive properties of Date \nas.Date(\"2023-04-17\")-7\nas.Date(\"2023-04-17\")+2\n\n\n\n\n\n\n\nChallenge\n\n\n\nSince type Date is additive, how to create successive date vector of length 5? Vector date start with “2023-04-17”\nCould you do the average of this vector?\n\n\n\n\n[1] \"2023-04-17\" \"2023-04-18\" \"2023-04-19\" \"2023-04-20\" \"2023-04-21\"\n\n\n\n\n\n\n# check if pattern exist in vector\n3%in%c(1,3) \n2%in%c(1,3) \n\n1==2 \n!1==2 \n1!=2 \nc(1,3)==2\n\nwhich(c(1,3)==3) \n\n# what will be the difference?\norder(c(3,1,2)) \nc(3,1,2) %>% .[order(.)]\n\n# what will be the data type? check with str()\nc(1,2,NA) %>% is.na() \nc(1,2,NA) %>% is.na() %>% which() \nc(1,2,NA) %>% is.na() %>% !.\nc(1,2,NA) %>% !is.na() \n!is.na(c(1,2,NA))\n\n# check if data type match\narg <- \"\"\nis.character(arg)\nif(is.character(arg)){\n  print(\"character\")\n}\n\nif(is.character(arg)){\n  print(\"character\")\n}else{\n  error(\"type other than character\")\n}\n\nif(is.character(arg)){\n  warning(\"wrong\")\n}\n\nif(is.character(arg)){\n  stop(\"wrong\")\n}\n\n\n\n\n\n\n\nChallenge\n\n\n\nInside your plusone function, please check first whether input x is numeric, then proceed the process.\nif not, return with message “wrong input type” using stop()"
  },
  {
    "objectID": "posts/Week3/index.html",
    "href": "posts/Week3/index.html",
    "title": "Week3: Floret development",
    "section": "",
    "text": "Welcome to the third course! You will learn ggplot and dataframe wrangling:\nReview game Kahoot!"
  },
  {
    "objectID": "posts/Week3/index.html#read-data-and-rproject",
    "href": "posts/Week3/index.html#read-data-and-rproject",
    "title": "Week3: Spikelet development",
    "section": "0.1 Read data and Rproject",
    "text": "0.1 Read data and Rproject\n\n0.1.1 practice dataframe with real data\n\ndata <- read.csv(\"data/ear_summarized.csv\")\n# data %>% str()\ndata %>% glimpse()\nnames(data)\n# extract column from dataframe\ndata$BBCH\ndata %>% unique()\n\n# summarize dataframe\nlapply(data, range)\n# turn as data frame\nlapply(data, range) %>% data.frame()\n\nsummary(data)"
  },
  {
    "objectID": "posts/Week3/index.html#data-format-overview",
    "href": "posts/Week3/index.html#data-format-overview",
    "title": "Week3: Spikelet development",
    "section": "3 Data format overview",
    "text": "3 Data format overview\n\ndat <-read.csv('./data/kernel_combine.csv',\n               header = T,stringsAsFactors = F) %>%\n  dplyr::filter(tiller==\"M\")\nglimpse(dat)\ndat %>% \n  group_by(car,var,nitrogen,time,rep) %>% \n  distinct()"
  },
  {
    "objectID": "posts/Week3/index.html#classify-spikelet-based-on-position",
    "href": "posts/Week3/index.html#classify-spikelet-based-on-position",
    "title": "Week3: Spikelet development",
    "section": "4 classify spikelet based on position",
    "text": "4 classify spikelet based on position\nthe spike of the main shoot was dissected to count the total number of floret in\n\nbasal (third-fifth spikelet from the bottom)\ncentral (middle spikelets)\napical (third-fifth spikelet from the top) spikelets throughout the spike reference\n\n\ndat %<>%\n  group_by(car,var,nitrogen,time,rep) %>% \n  mutate(type=cut(spike,3) %>% as.numeric(),\n         type=case_when(type==1~\"basal\",\n                        type==2~\"central\",\n                        T~\"apical\")) %>% \n  group_by(car,var,nitrogen,time,rep,type) %>% \n  dplyr::arrange(spike) %>% \n  mutate(Fl=seq(1,n())) %>% \n  dplyr::arrange(var,nitrogen,time,rep,spike)\nglimpse(dat)\n\nRows: 4,749\nColumns: 13\nGroups: car, var, nitrogen, time, rep, type [681]\n$ car          <int> 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, ~\n$ nitrogen     <chr> \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1~\n$ time         <chr> \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1~\n$ var          <chr> \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Al~\n$ rep          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, ~\n$ tiller       <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M~\n$ spike        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1,~\n$ flower       <int> 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 2, 2, 2, ~\n$ kernel.full  <int> 0, 0, 1, 2, 3, 2, 2, 3, 3, 3, 2, 3, 2, 2, 1, 2, 0, 0, 0, ~\n$ kernel.half  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ kernel.small <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ type         <chr> \"basal\", \"basal\", \"basal\", \"basal\", \"basal\", \"basal\", \"ce~\n$ Fl           <int> 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, ~"
  },
  {
    "objectID": "posts/Week3/index.html#lookuptable-of-treatment-not-yet",
    "href": "posts/Week3/index.html#lookuptable-of-treatment-not-yet",
    "title": "Week3: Spikelet development",
    "section": "4 lookuptable of treatment (not yet)",
    "text": "4 lookuptable of treatment (not yet)"
  },
  {
    "objectID": "posts/Week3/index.html#basic-summary-of-kernel-development-summ-for-single-spike",
    "href": "posts/Week3/index.html#basic-summary-of-kernel-development-summ-for-single-spike",
    "title": "Week3: Spikelet development",
    "section": "5 basic summary of kernel development summ for single spike",
    "text": "5 basic summary of kernel development summ for single spike\nSp: total spikelet Fl: maximum floret sfl: total floret kf: total full kernel kh: total half kernel ks: total small kernel kp: potential kernel number fr: filling rate fc: potential filling rate\n\nsum.dat <- dat %>% \n  dplyr::group_by(nitrogen,time,var,rep,tiller,type) %>% \n  dplyr::summarise(\n    Sp=max(spike),#total spikelet\n    Fl=max(flower),# maximum floret \n    sfl=sum(flower),# total floret\n    kf=sum(kernel.full),# total full kernel\n    kh=sum(kernel.half),# total half kernel\n    ks=sum(kernel.small),# total small kernel\n    kp=kf+kh,# potential kernel number \n    fr=kf/sfl,# filling rate \n    fc=kf/kp)#potential filling rate\nglimpse(sum.dat)\n\nRows: 681\nColumns: 15\nGroups: nitrogen, time, var, rep, tiller [227]\n$ nitrogen <chr> \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"~\n$ time     <chr> \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"~\n$ var      <chr> \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\"~\n$ rep      <int> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 1, 1, 1, 2, 2, 2~\n$ tiller   <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"~\n$ type     <chr> \"apical\", \"basal\", \"central\", \"apical\", \"basal\", \"central\", \"~\n$ Sp       <int> 16, 6, 11, 19, 7, 13, 17, 6, 11, 19, 7, 13, 19, 7, 13, 16, 6,~\n$ Fl       <int> 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4~\n$ sfl      <int> 19, 18, 20, 21, 21, 24, 22, 20, 20, 21, 22, 24, 18, 21, 24, 1~\n$ kf       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ kh       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~\n$ ks       <int> 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0~\n$ kp       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ fr       <dbl> 0.5263158, 0.4444444, 0.6500000, 0.6666667, 0.5238095, 0.7500~\n$ fc       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~"
  },
  {
    "objectID": "posts/Week3/index.html#data-wrangling-and-plot-with-facet",
    "href": "posts/Week3/index.html#data-wrangling-and-plot-with-facet",
    "title": "Week3: Spikelet development",
    "section": "6 Data wrangling and plot with facet",
    "text": "6 Data wrangling and plot with facet\n\nlong_format <- dat %>% \n  tidyr::pivot_longer(cols=c(nitrogen,time),\n                      names_to = \"treatment\",\n                      values_to = \"levels\") %>% \n  group_by(spike,var,treatment,levels,type,rep) %>%\n  summarise(fertile_flower=max(kernel.full)) %>% \n  group_by(spike,var,treatment,levels,type) %>%\n  summarise(fertile_flower=mean(fertile_flower))\n\nlong_format%>% \n  filter(fertile_flower<10) %>% \n  ggplot(aes(fertile_flower,spike,color=type,shape=levels))+\n  geom_point()+\n  facet_grid(treatment~var)+\n  theme_classic()+\n  scale_x_continuous(limits = c(0,5),breaks=seq(0,4))"
  },
  {
    "objectID": "posts/Week1/index.html#working-directory",
    "href": "posts/Week1/index.html#working-directory",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1 Working directory",
    "text": "1 Working directory\n\ngetwd()\n# read.csv()# try to read one file"
  },
  {
    "objectID": "posts/Week1/index.html#concept-of-datatype-case-sensitive",
    "href": "posts/Week1/index.html#concept-of-datatype-case-sensitive",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.1 Concept of datatype & case sensitive",
    "text": "1.1 Concept of datatype & case sensitive\n\nvariable\n# assignment str\"v\" to name \"variable\"\n## \"\" and unquote str and variable \n\nvariable <- \"v\"\nVariable <- 1\nvariable +1\nVariable +1"
  },
  {
    "objectID": "posts/Week1/index.html#the-reason-of-error-data-type",
    "href": "posts/Week1/index.html#the-reason-of-error-data-type",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "3 the reason of error – data type",
    "text": "3 the reason of error – data type\n\n# str??\nstr\n?str\nstr(variable)\nstr(Variable)\n# data type coersion\nstr(NA)\nstr(c(NA,1))\nstr(c(NA,\"a\"))\nstr(c(NA,TRUE))\nstr(c(1,\"a\"))"
  },
  {
    "objectID": "posts/Week1/index.html#function-argument1-argument2",
    "href": "posts/Week1/index.html#function-argument1-argument2",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "0.4 function (argument1, argument2)",
    "text": "0.4 function (argument1, argument2)\n\nc(1,2,3)\nseq(1,3,1)\n# embeded function fun2(fun1(argument))\nlength(c(1,2,3))\nstr(c(1,2,3))\n\nrep(1,3)\nrep(1,3) %>% unique()\nrep(1,3) %>% cumsum()"
  },
  {
    "objectID": "posts/Week1/index.html#write-your-first-function",
    "href": "posts/Week1/index.html#write-your-first-function",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.6 write your first function",
    "text": "1.6 write your first function\n\nplusone <- function(x){x+1}\n# is function data type sensitive?\nplusone(variable)\nplusone(Variable)\n\n\n\n\n\n\n\nChallenge\n\n\n\nwrite a average function and check whether input is numeric if not return with warning *first write your function in text"
  },
  {
    "objectID": "posts/Week1/index.html#function-argument1-argument2-code",
    "href": "posts/Week1/index.html#function-argument1-argument2-code",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "4 function (argument1, argument2) {code}",
    "text": "4 function (argument1, argument2) {code}\n\nc(1,2,3)\nseq(1,3,1)\n# embeded function fun2(fun1(argument))\nlength(c(1,2,3))\nstr(c(1,2,3))\n\nrep(1,3)\nrep(1,3) %>% unique()\nrep(1,3) %>% cumsum()"
  },
  {
    "objectID": "posts/Week1/index.html#indexing",
    "href": "posts/Week1/index.html#indexing",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "6 indexing",
    "text": "6 indexing\n\n3%in%c(1,3) \n2%in%c(1,3) \n1==2 \n!1==2 \n1!=2 \nwhich(c(1,3)==3) \norder(c(3,1,2)) \nc(3,1,2) %>% .[order(.)]\n\nc(1,2,NA) %>% is.na() c(1,2,NA) %>% is.na() %>% which() c(1,2,NA) %>% is.na() %>% !. c(1,2,NA) %>% !is.na() !is.na(c(1,2,NA) )\n\n\ndata.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1),\n           temp=c(20,15,13), \n           thermal_time=cumsum(temp))\n\ndf <- data.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1),\n                 temp=c(20,15,13), thermal_time=cumsum(c(20,15,13)))\n\ndf$temp %>% str()\ndf[\"temp\"] %>% str()\ndf[,\"temp\"] %>% str()\ndf[[\"temp\"]] %>% str()"
  },
  {
    "objectID": "posts/Week1/index.html#check-data-type",
    "href": "posts/Week1/index.html#check-data-type",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.2 Check data type",
    "text": "1.2 Check data type\n\n# str??\nstr\n?str\nstr(variable)\nstr(Variable)\n# data type coersion\nstr(NA)\nstr(c(NA,1))\nstr(c(NA,\"a\"))\nstr(c(NA,TRUE))\nstr(c(1,\"a\"))"
  },
  {
    "objectID": "posts/Week1/index.html#function-something-with",
    "href": "posts/Week1/index.html#function-something-with",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.3 Function: something with ()",
    "text": "1.3 Function: something with ()\nformat: function_name(argument1, argument2) {code}\n\n# how many ways of creating sequence?\nc(1,2,3)\nseq(1,3,1)\n\n# embeded function fun2(fun1())\nlength(c(1,2,3))\n# use pipe, . is the result of previous step\nc(1,2,3) %>% length(.)\n\n# what is the data type?\nstr(c(1,2,3))\n\n# replicate\nrep(1,3)\nrep(1,3) %>% unique()\nrep(1,3) %>% cumsum()\n\npaste(c(\"a\",\"1\"),collapse = \"\")\npaste0(c(\"a\",\"1\"))\n\n\n\n\n\n\n\nChallenge\n\n\n\nhow to use pasteand repto create sequence of char vector c(“a1”,“b1”,“a2”,“b2”)?\n\n\n\n\n[1] \"a1\" \"a2\" \"b1\" \"b2\"\n\n\n[1] \"a1\" \"b1\" \"a2\" \"b2\""
  },
  {
    "objectID": "posts/Week1/index.html#pattern-matching-logical-vector-and-its-position",
    "href": "posts/Week1/index.html#pattern-matching-logical-vector-and-its-position",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.7 pattern matching: logical vector and its position",
    "text": "1.7 pattern matching: logical vector and its position\n\n3%in%c(1,3) \n2%in%c(1,3) \n1==2 \n!1==2 \n1!=2 \n\nwhich(c(1,3)==3) \n# what will be the difference\norder(c(3,1,2)) \nc(3,1,2) %>% .[order(.)]\n\n# what will be the data type?\nc(1,2,NA) %>% is.na() \nc(1,2,NA) %>% is.na() %>% which() \nc(1,2,NA) %>% is.na() %>% !.\nc(1,2,NA) %>% !is.na() \n!is.na(c(1,2,NA))"
  },
  {
    "objectID": "posts/Week1/index.html#indexing-something-with-or",
    "href": "posts/Week1/index.html#indexing-something-with-or",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.8 Indexing something with [] or $",
    "text": "1.8 Indexing something with [] or $\n\n# why this will not work?\ndata.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1),\n           temp=c(20,15,13), \n           thermal_time=cumsum(temp))\ndf\n\n\n\n\n\n\n\nChallenge\n\n\n\ncreate data frame to calculate thermal time\n\n\n\n\n        time temp thermal_time\n1 2023-04-17   20           20\n2 2023-04-18   15           35\n3 2023-04-19   13           48\n\n\n\n# which is of type dataframe?\ndf$temp %>% str()\ndf[\"temp\"] %>% str()\ndf[,\"temp\"] %>% str()\ndf[[\"temp\"]] %>% str()"
  },
  {
    "objectID": "posts/Week1/index.html#date",
    "href": "posts/Week1/index.html#date",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.5 Date",
    "text": "1.5 Date\n\n\n\n\n\n\n\n\n\nChallenge\n\n\n\nif Date is additive, how to create successive Date vector? Date start with “2023-04-17”\n\n\n\n\n[1] \"2023-04-17\" \"2023-04-18\" \"2023-04-19\" \"2023-04-20\" \"2023-04-21\""
  },
  {
    "objectID": "posts/Week1/index.html#r-packages",
    "href": "posts/Week1/index.html#r-packages",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.4 r packages",
    "text": "1.4 r packages\nhttps://dplyr.tidyverse.org/"
  },
  {
    "objectID": "posts/Week1/index.html#name-rules",
    "href": "posts/Week1/index.html#name-rules",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.9 name rules",
    "text": "1.9 name rules"
  },
  {
    "objectID": "posts/Week1/index.html#section",
    "href": "posts/Week1/index.html#section",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.10 ",
    "text": "1.10 \n#Plot Open Ear_development_BSC_project.Rproj, go to file, src, open Week1.R ## Working directory\n\ngetwd()\n# read.csv()# try to read one file"
  },
  {
    "objectID": "posts/Week2/index.html",
    "href": "posts/Week2/index.html",
    "title": "Week2: The growth of spike in winter wheat",
    "section": "",
    "text": "Welcome to the second course! You will learn working directory, subset elements from vector, list and dataframe.\n\n\n\n\n\n\nNote\n\n\n\n\nWhat is working directory (wd)?\nHow to subset elements from vector, list and dataframe\n\n\n\nIf you haven’t download the data, please go to HU-box.\nOpen Ear_development_BSC_project.Rproj\ncreate Week2.R and save it in folder src.\n\n\n\n\n\".\" means the working directory (wd) where this R script exists.\n\"..\" means the parent (one level higher) directory of \".\".\n\nlibrary(dplyr)\n\n# working directory, abbreviated as \".\"\ngetwd()\n# parent directory, abbreviated as \"..\"\ndirname(getwd())\n# assign current path to variable\ncurrent_path <- getwd()\n# check the type \ncurrent_path %>% str()\n\n\n# check files in the directory\n\n# are they different?\n\".\" %>% list.files(path=.)\ngetwd() %>% list.files(path=.)\n\n# are they different?\n\"..\" %>% list.files(path=.)\ngetwd() %>% dirname() %>% list.files(path=.)\n\n\n\n\n\n\n\nChallenge\n\n\n\nAlthough the meaning of . is the same as getwd(), the content is depending on the environment you are working with.\nRight click R studio logo, open a new R studio window, compare the result of getwd() in R project and R\n\n\n\n\n\nWhich one do you prefer? Why do we prefer relative path?\n\n# absolute path, did you get error?\n\"C:/Users/marse/seadrive_root/Tien-Che/My Libraries/PhD_Tien/Project/Postdoc_teaching/BSC_project_IPFS2023/data\" %>% list.files(path=.)\n# relative path in R base\nparent_path <- getwd() \npaste0(parent_path,\"/data\") %>% list.files(path=.)\n\n# Does this works? \n\".\\data\" %>% list.files(path=.)\n\"data\" %>% list.files(path=.)\n\n\n\n\n\n\n\nChallenge\n\n\n\nread from relative path, which one is correct? Assume working directory current_path is \"C/users/BSC_project/src\"\nAbsolute_path = current_path +\"/\"+relative_path Below are four relative paths. Please rewrite them in absolute (full) path form. What should . be replace? Which two are the same? Based on the figure illustated below, path 1-4 should be A,B,C or D?\n\n\"ear_summarized.csv\"\n\"data/ear_summarized.csv\"\n\"./data/ear_summarized.csv\"\n\"../data/ear_summarized.csv\"\n\n\n\n\n\n\n\n\nvector indexing start from 1 to the length of the vector.\n\nempty_vec <- c()\nlength(empty_vec)\n# what is the type of the empty vec?\nempty_vec %>% str()\n\n# NULL: empty \nempty_vec[1]\nempty_vec[0]\n\n\nvec <- c(1,3,5)\nvec[1]\n#reorder the vector \nvec[c(2,1,3)]\n# removing the indexed elements\nvec[-1]\nvec[-2]\n\n# indexing start from 1, not 0\n# therefore you get, numeric(0)\nvec[0]\n# when access exceeding the range of a vector, what datatype do you get? \nvec[4]\nvec %>% .[length(.)+1]\nvec[1:4]\nvec[4:1]\n\n# find specific element or position\nvec[c(F,T,F)]\nvec[vec==5]\n# when codition not match at all, it will return? \nvec[vec==2]\nvec[c(F,F,F)]\nvec %>% .[c(F)]\nvec[vec==\"a\"]\n\n# default str vector\nletters\nLETTERS\n# when the query does not match, guess what will be the datatype? \nletters %>% .[.==2]\nletters %>% .[c(F)]\n# vector over write\nvec\nvec <- c(2,1,3)\nvec\n\n\n\n\n\n\n\nChallenge\n\n\n\n\nvec <- c(1, 2, 3, 4, 5)\nlogical_vec <- c(TRUE, FALSE)\nsubset_vec <- vec[logical_vec]\nsubset_vec\n\n[1] 1 3 5\n\n\nwhat did you observe? Is there any vector recycling?\nWhat happen when you enter vec[TRUE]?\n\n\nSupplementary information of special datatypes:\nEmpty : NULL\nIndexing at zero position:numeric(0)\n\n\nlist_object<- list(element_name=value) Make a list is like put a cookie(content of list element) in the cookie jar(list element).\nThere are 3 common accessors for list: 1. access the list element (cookie jar)\n[] access the list position\n\nacess the content of list element (cookie)\n\n[[]] access the content of a list element by position or name\n$ access the content of a list element by name\nlist_object$element_name or list_object[[element_name]]\n\n\n\nlist without name\n\n\n\n\n\nlist with name\n\n\nMore about the accessors\n\n# create a simple list\nlist(1)\n# create a simple list with name \"x\" for first element\nlist(x=1)\nlist(x=1)[\"x\"]\n# extract content\nlist(x=1)$\"x\"\nlist(x=1)[[1]]\nlist(x=1)[[\"x\"]]\n\n# extract with pipe\nlist(x=1) %>% .[[1]]\nlist(x=1) %>% .$\"x\"\n\n# long list\nlong_list_example <- list(1,c(1,2),\n                          T,c(T,T),\n                          \"str\",c(\"a\",\"b\"),\n                          list(1),\n                          mean,data.frame())\n# check structure of this list \n# list_complex_example %>% str()\n# list_complex_example %>% glimpse()\n# list_complex_example\n# first list \nlong_list_example[1]\n# content of first list\nlong_list_example[[1]]\n# first element of content of first list\nlong_list_example[[1]][1]\n\n\n\n\n\n\n\nChallenge\n\n\n\ncan you guess what data type are these?\n\n# non-sense\nlong_list_example[[1]][2]\nlong_list_example[1][1]\nlong_list_example[1][2]\nlong_list_example[2][2]\n# meaningful\nlong_list_example[[2]][2]\n\n\n\n\n\n\nlapply(vector, function) ?lapply\n\n# input is vector\nc(1,4) %>% \n  lapply(.,FUN=function(x){x+3})\n# input is list\nlist(2,4,c(1,4)) %>% \n  lapply(.,FUN=function(x){x+3})\n# input has differnt type\nlist(2,4,c(1,4),\"8\") %>% \n  lapply(.,FUN=function(x){x+3})\n\n\n\n\n\n\n\nChallenge\n\n\n\nWhy you get error in the last line?\n\n\n\n\n\neach column has one data type\n\n# create a dataframe \ndf <- data.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1),\\temp=c(20,15,13),\\thermal_time=cumsum(c(20,15,13)))\n# another way\ndf <- data.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1)) \ndf$temp=c(20,15,13)\ndf$thermal_time=cumsum(df$temp)\n\n# third method\nlibrary(dplyr)\ndf <- data.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1)) %>% \n  mutate(temp=c(20,15,13), \n         thermal_time=cumsum(temp))\ndf\n\n\n\n\n\n\n\nChallenge\n\n\n\nIs it possible to create data frame with vectors of different length?\n\ndata.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1), \n           temp=c(20,13))\n\n\n\n\n\n\nYou can subset dataframe by indexing [row,column]\ndataframe[,column] select the whole role for selected columnn\ndataframe[row,] select the whole column of selected rows\nSelect multiple row or column by puting logical or numeric vector in the square bracket.\n\n\n\n\n\n\n\n\n\nChallenge\n\n\n\nuse df,\n\nAccess column thermal_time as vector\nExtract temp when time is 2023-04-17\nExtract first row and first column with [1,]and [,1]\n\n\n\n\n\n\n\n\n\nChallenge\n\n\n\nif you want to turn a data frame (df) by 90 degree (“transpose”), which function can you use? Could you find the answer on google or chatGPT?"
  },
  {
    "objectID": "posts/Week2/index.html#plot",
    "href": "posts/Week2/index.html#plot",
    "title": "Week2: The growth of spike in winter wheat",
    "section": "Plot",
    "text": "Plot\n\nGGplot2\nRequirements of scientific plot. 1. axis title with unit if there is any.\n\nlegend title full name instead of default abbreviation.\n\nFigure title.\nggplot 2 ggplot gallery\n\nlibrary(ggplot)\nlibrary(ggplot2)\n\n\ndata %>% \nggplot(aes(x=date,y=weight,color=var))+\ngeom_point()+\ngeom_line(aes(group=group))+ # link the point by group.\nxlab(\"date of harvest\")+ #x axis title\nylab(\"ear weight(g)\")+   #y axis title\nguides(color=guide_legend(title=\"Cultivar\")) #change legend title \n\n\n\n\nFigure 1: Growth of ear weight over time.\n\n\n\n\n\n\n\n\n\n\nChallenge\n\n\n\nuse theme_xx() function series to change background of the plot. Find your favorite one.\n\n\n\n\n\n\n\ndark theme example."
  },
  {
    "objectID": "posts/Week2/index.html#discussion-goes-here",
    "href": "posts/Week2/index.html#discussion-goes-here",
    "title": "Week2: The growth of spike in winter wheat",
    "section": "Discussion goes here",
    "text": "Discussion goes here"
  },
  {
    "objectID": "posts/Week3/index.html#plot",
    "href": "posts/Week3/index.html#plot",
    "title": "Week3: Spikelet development",
    "section": "2 Plot",
    "text": "2 Plot\n\n2.1 GGplot2\nggplot grammar: layer wise command, order is important!\nTop layer ggplot()and sub-layers sublayer_command(), they are separated by +.\nWithin each layer, there may be an aesthetic function aes() to set aesthetic setting like x,y and color,fill or shape. Function ggplot() will not generate any graph but used for setting common aesthetic setting across the sub-layer. Plot type are specify in sub-layer with prefix geom_xx.\n\n\n\nlayers of ggplot: click picture for original source\n\n\n Requirements of scientific plot.3.3 More reference: ggplot 2 ggplot gallery\n\naxis title: specify with unit if there is any using xlab() or ylab().\nlegend title: full name instead of default abbreviation using guides().\n\n\n# Watch out the names!\nlibrary(ggplot)\nlibrary(ggplot2)\n\n\ndata %>% \n  ggplot(aes(x=date,y=weight,color=var))+\n  geom_point()+\n  geom_line(aes(group=group))+ # link the point by group.\n  xlab(\"date of harvest\")+ #x axis title\n  ylab(\"ear weight(g)\")+   #y axis title\n  guides(color=guide_legend(title=\"Cultivar\")) #change legend title \n\n\n\n\nFigure 1: Growth of ear weight over time.\n\n\n\n\n\n\n\n\n\n\nChallenge\n\n\n\nuse theme_xx() function series to change background of the plot. Find your favorite one.\n\n\n\n\n\n\n\ndark theme example."
  },
  {
    "objectID": "posts/Week3/index.html#dplyr",
    "href": "posts/Week3/index.html#dplyr",
    "title": "Week3: Floret development",
    "section": "1 dplyr",
    "text": "1 dplyr\n\n1.1 Subset row(s)\ndplyr::filter(): extract row where the condition matched. 22 r_package::function_name specify the function name by package name.:: has similar meaning like “from”. It is useful to avoid name space conflict when same function name is used by multiple library that you are using.\ne.g., extract temp where time is 2023-04-17 in df.\n\n# df$time %>% str()\ndf %>% dplyr::filter(time=='2023-04-17') %>% .$temp\ndf %>% dplyr::filter(time==as.Date('2023-04-17')) %>% .$temp\n\n\n\n1.2 Add column(s)\ndplyr::mutate(): add one or multiple columns to dataframe.\ne.g., add columnYear to df, its value is '2023'.\n\n# result is not save\ndf %>% dplyr::mutate(Year=\"2023\") \ndf\n# result is saved\ndf$Year <- \"2023\"\ndf[['Year']] <- \"2023\"\ndf\n\n\n\n\n\n\n\nNote\n\n\n\nHow to save result using %>%? Check example with ?mutate.\n\n\n\n\n1.3 Combine dataframes by column.\n\ndf <- data.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1),\n                 temp=c(20,15,13), \n                 thermal_time=cumsum(c(20,15,13)))\n# with same length dataframe\near_df <- data.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1),\n                     ear_weight=c(20,40,50))\nmerge(df,ear_df,by=\"time\")\ndplyr::left_join(df,ear_df,by=\"time\")\n# combind with vector of same length \ncbind(df, ear_weight=c(20,40,50))\ndf$ear_weight <- c(20,40)\n\n# with differnt length \nshort_ear_df <- data.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,2,1),\n                           ear_weight=c(20,40))\nmerge(df,short_ear_df,by=\"time\")\ndplyr::left_join(df,short_ear_df,by=\"time\")\n\n# combind with vector of different length \ncbind(df, ear_weight=c(20,40))\ndf$ear_weight <- c(20,40)\n\n\n\n\n\n\n\nNote\n\n\n\nCheck description of merge and left_join, how are they different from each other? What happen if you remove the argument by?"
  },
  {
    "objectID": "posts/Week3/index.html#recommendation",
    "href": "posts/Week3/index.html#recommendation",
    "title": "Week3: Spikelet development",
    "section": "3 Recommendation",
    "text": "3 Recommendation\n\n3.1 online tutorials:\nggplot datacamp ggplot 2 ggplot gallery\n\n\n3.2 online books:\nggplot cheatsheet Data visualization with R R for Data Science: Chapter3 Visualization"
  },
  {
    "objectID": "posts/Week3/index.html#recommendation-online-books",
    "href": "posts/Week3/index.html#recommendation-online-books",
    "title": "Week3: Spikelet development",
    "section": "8 Recommendation online books",
    "text": "8 Recommendation online books\nData visualization with R R for Data Science: Chapter3 Visualization"
  },
  {
    "objectID": "posts/Week3/index.html#ggplot2",
    "href": "posts/Week3/index.html#ggplot2",
    "title": "Week3: Floret development",
    "section": "2 GGplot2",
    "text": "2 GGplot2\n\n2.1 ggplot grammar: layer-wise commands\n\n\n\nlayers of ggplot: click picture for original source\n\n\n\n\n\nsymbol, aes & …\n\n\nTop layer ggplot()and sub-layers sublayer commands 3, they are separated by +.3 see function reference for more!\nWithin each layer, there may be an aesthetic function aes() to set aesthetic setting like x,y and color,fill or shape. Function ggplot() will not generate any graph but used for setting common aesthetic setting across the sub-layer. Plot type are specify in sub-layer with prefix geom_xx.\n\n\n\n\n\n\norder matters!\n\n\n\nIf there are conflicts between the sub-layer commands, the latter will overwrite the previous one!\n\n\n\n\n2.2 Requirements of scientific plot.\n\naxis title: specify with unit if there is any using xlab() or ylab().\nlegend title: full name instead of default abbreviation using guides().\nother important rules: 4.\n\n4 Ten simple rules for better figures How to Make Good Graphs and Figures for Scientific Papers\n# Watch out the names!\nlibrary(ggplot)\nlibrary(ggplot2)\n\n\n\n\n\n\n\nNote\n\n\n\ngo to HU-box download phenology_short.csvand put it in folder data. read this file using read.csv with relative path and named it as phenology\n\n\n\ndata %>% \n  ggplot(aes(x=date,y=weight,color=var))+\n  geom_point()+\n  geom_line(aes(group=group))+ # link the point by group.\n  xlab(\"date of harvest\")+ #x axis title\n  ylab(\"ear weight(g)\")+   #y axis title\n  guides(color=guide_legend(title=\"Cultivar\")) #change legend title \n\n\n\n\nFigure 1: Growth of ear weight over time.\n\n\n\n\n\n\n\n\n\n\nchallenge : use theme_xx() function series to change background of the plot. Click for example.\n\n\n\n\n\n\n\n\n\n\nFigure 2: dark theme example.\n\n\n\n\n\n\n\n\n\n2.3 facet: organized subplot by column\nThere are two commonly used functionfacet_grid and facet_wrap. In side each function, subplots are arranged in the manner of (row ~ column). There could be multiple column names put in the row or column position.\n\nphenology %>% \nggplot(.,aes(x=var,y=value))+\n  geom_boxplot()+\n  facet_grid(Year~stage)\n\n\n\n\nFigure 3: uggly example.\n\n\n\n\n\n\n\n\n\n\nMake this graph more beautiful!\n\n\n\n\n\nHow to make each point show in box plot? (search for scatter points in boxplot ggplot2)\nHow does color and fill differs? Can you color it by var?\nCould you apply another color scale using viridis package?\nHow to remove the background of the facet title with theme()? what does element_blank() do?\nFollow up question, if you also apply theme_test() to it, it should be before or after theme()?\nHow to change title size? how does it related to element_text()\nCould you change the axis title display angle as 90 degree?\nHow do you add title?\n\n\n\n\n\nFigure 4: beautiful example."
  },
  {
    "objectID": "posts/Week3/index.html#spikelet-position-practice",
    "href": "posts/Week3/index.html#spikelet-position-practice",
    "title": "Week3: Spikelet development",
    "section": "3 Spikelet position practice",
    "text": "3 Spikelet position practice\n\n3.1 Data overview\n\ndat <-read.csv('./data/kernel_combine.csv',\n               header = T,stringsAsFactors = F) %>%\n  dplyr::filter(tiller==\"M\")\nglimpse(dat)\ndat %>% \n  group_by(car,var,nitrogen,time,rep) %>% \n  distinct()\n\n\n\n3.2 classify spikelet based on position\nthe spike of the main shoot was dissected to count the total number of floret in\n\nbasal (third-fifth spikelet from the bottom)\ncentral (middle spikelets)\napical (third-fifth spikelet from the top) spikelets throughout the spike reference\n\n\ndat %<>%\n  group_by(car,var,nitrogen,time,rep) %>% \n  mutate(type=cut(spike,3) %>% as.numeric(),\n         type=case_when(type==1~\"basal\",\n                        type==2~\"central\",\n                        T~\"apical\")) %>% \n  group_by(car,var,nitrogen,time,rep,type) %>% \n  dplyr::arrange(spike) %>% \n  mutate(Fl=seq(1,n())) %>% \n  dplyr::arrange(var,nitrogen,time,rep,spike)\nglimpse(dat)\n\nRows: 4,749\nColumns: 13\nGroups: car, var, nitrogen, time, rep, type [681]\n$ car          <int> 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, ~\n$ nitrogen     <chr> \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1~\n$ time         <chr> \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1~\n$ var          <chr> \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Al~\n$ rep          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, ~\n$ tiller       <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M~\n$ spike        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1,~\n$ flower       <int> 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 2, 2, 2, ~\n$ kernel.full  <int> 0, 0, 1, 2, 3, 2, 2, 3, 3, 3, 2, 3, 2, 2, 1, 2, 0, 0, 0, ~\n$ kernel.half  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ kernel.small <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ type         <chr> \"basal\", \"basal\", \"basal\", \"basal\", \"basal\", \"basal\", \"ce~\n$ Fl           <int> 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, ~"
  },
  {
    "objectID": "posts/Week3/index.html#recommendations",
    "href": "posts/Week3/index.html#recommendations",
    "title": "Week3: Floret development",
    "section": "3 Recommendations",
    "text": "3 Recommendations\n\n3.1 online tutorials:\nggplot datacamp ggplot 2 ggplot gallery\n\n\n3.2 online books:\nggplot cheatsheet Data visualization with R R for Data Science: Chapter3 Visualization\n\n\n\n\n\n\n\nFigure 5: original article."
  },
  {
    "objectID": "posts/Week3/index.html#feedback-this-week",
    "href": "posts/Week3/index.html#feedback-this-week",
    "title": "Week3: Floret development",
    "section": "4 Feedback this week",
    "text": "4 Feedback this week\nAnonymous feedback"
  },
  {
    "objectID": "posts/Week4/index.html",
    "href": "posts/Week4/index.html",
    "title": "Week4: Grain development I",
    "section": "",
    "text": "Welcome to the third course! You will learn dataframe wrangling:"
  },
  {
    "objectID": "posts/Week4/index.html#dd",
    "href": "posts/Week4/index.html#dd",
    "title": "Week4: Grain development",
    "section": "1 dd",
    "text": "1 dd"
  },
  {
    "objectID": "sylabus.html",
    "href": "sylabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "penguin_table %>% as_raw_html()\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-"
  },
  {
    "objectID": "posts/Week4/index.html#section",
    "href": "posts/Week4/index.html#section",
    "title": "Week4: Grain development",
    "section": "1 ",
    "text": "1"
  },
  {
    "objectID": "posts/Week4/index.html#spikelet-position-practice",
    "href": "posts/Week4/index.html#spikelet-position-practice",
    "title": "Week4: Grain development",
    "section": "3 Spikelet position practice",
    "text": "3 Spikelet position practice\nread kernel_combine.csv in folder data using relative path. subset column tiller which match pattern M.\nHow can you get the unique combination of car,var,nitrogen and time? Which combinations of functions can you use?\n\n\n\n\n\n\nchallenge\n\n\n\n\n\n\n\n# A tibble: 48 x 4\n# Groups:   car, var, nitrogen [48]\n     car var       nitrogen time \n   <int> <chr>     <chr>    <chr>\n 1     1 Alves     n3       t1   \n 2     1 Apertus   n3       t1   \n 3     1 Esket     n3       t1   \n 4     1 Pioneer   n3       t1   \n 5     1 Potential n3       t1   \n 6     1 Torrid    n3       t1   \n 7     2 Alves     n4       t1   \n 8     2 Apertus   n4       t1   \n 9     2 Esket     n4       t1   \n10     2 Pioneer   n4       t1   \n# i 38 more rows\n\n\n\n\n\n\n3.1 classify spikelet based on position\nthe spike of the main shoot was dissected to count the total number of floret in\n\nbasal (third-fifth spikelet from the bottom)\ncentral (middle spikelets)\napical (third-fifth spikelet from the top) spikelets throughout the spike reference\n\n\n\n\n\n\n3.2 basic summary of kernel development summ for single spike\n\nSp: total spikelet\nFl: maximum floret\nsfl: total floret\nkf: total full kernel\nkh: total half kernel\nks: total small kernel\nkp: potential kernel number\nfr: filling rate\nfc: potential filling rate\n\n\n\nRows: 681\nColumns: 15\nGroups: nitrogen, time, var, rep, tiller [227]\n$ nitrogen <chr> \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"~\n$ time     <chr> \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"~\n$ var      <chr> \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\"~\n$ rep      <int> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 1, 1, 1, 2, 2, 2~\n$ tiller   <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"~\n$ type     <chr> \"apical\", \"basal\", \"central\", \"apical\", \"basal\", \"central\", \"~\n$ Sp       <int> 16, 6, 11, 19, 7, 13, 17, 6, 11, 19, 7, 13, 19, 7, 13, 16, 6,~\n$ Fl       <int> 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4~\n$ sfl      <int> 19, 18, 20, 21, 21, 24, 22, 20, 20, 21, 22, 24, 18, 21, 24, 1~\n$ kf       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ kh       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~\n$ ks       <int> 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0~\n$ kp       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ fr       <dbl> 0.5263158, 0.4444444, 0.6500000, 0.6666667, 0.5238095, 0.7500~\n$ fc       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~\n\n\n\n\n3.3 Data wrangling and plot with facet"
  },
  {
    "objectID": "posts/Week4/index.html#lookuptable-of-treatment-not-yet",
    "href": "posts/Week4/index.html#lookuptable-of-treatment-not-yet",
    "title": "Week4: Grain development",
    "section": "4 lookuptable of treatment (not yet)",
    "text": "4 lookuptable of treatment (not yet)"
  },
  {
    "objectID": "posts/Week4/index.html#basic-summary-of-kernel-development-summ-for-single-spike",
    "href": "posts/Week4/index.html#basic-summary-of-kernel-development-summ-for-single-spike",
    "title": "Week4: Grain development",
    "section": "4 basic summary of kernel development summ for single spike",
    "text": "4 basic summary of kernel development summ for single spike\n\nSp: total spikelet\nFl: maximum floret\nsfl: total floret\nkf: total full kernel\nkh: total half kernel\nks: total small kernel\nkp: potential kernel number\nfr: filling rate\nfc: potential filling rate\n\n\n\nRows: 681\nColumns: 15\nGroups: nitrogen, time, var, rep, tiller [227]\n$ nitrogen <chr> \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"~\n$ time     <chr> \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"~\n$ var      <chr> \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\"~\n$ rep      <int> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 1, 1, 1, 2, 2, 2~\n$ tiller   <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"~\n$ type     <chr> \"apical\", \"basal\", \"central\", \"apical\", \"basal\", \"central\", \"~\n$ Sp       <int> 16, 6, 11, 19, 7, 13, 17, 6, 11, 19, 7, 13, 19, 7, 13, 16, 6,~\n$ Fl       <int> 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4~\n$ sfl      <int> 19, 18, 20, 21, 21, 24, 22, 20, 20, 21, 22, 24, 18, 21, 24, 1~\n$ kf       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ kh       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~\n$ ks       <int> 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0~\n$ kp       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ fr       <dbl> 0.5263158, 0.4444444, 0.6500000, 0.6666667, 0.5238095, 0.7500~\n$ fc       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~"
  },
  {
    "objectID": "posts/Week4/index.html#data-wrangling-and-plot-with-facet",
    "href": "posts/Week4/index.html#data-wrangling-and-plot-with-facet",
    "title": "Week4: Grain development",
    "section": "5 Data wrangling and plot with facet",
    "text": "5 Data wrangling and plot with facet"
  },
  {
    "objectID": "docs/posts/Week4/index.html",
    "href": "docs/posts/Week4/index.html",
    "title": "BSC_project_IPFS2023",
    "section": "",
    "text": "Week4: Grain development\nTien-Cheng\n5/9/23\nWelcome to the third course! You will learn ggplot and dataframe wrangling:\n\nLearning goals\n\ndata frame wrangling with dplyr\nggplot2\n\n\nReview game Kahoot!"
  },
  {
    "objectID": "posts/Week4/index.html#more-mutate-examples",
    "href": "posts/Week4/index.html#more-mutate-examples",
    "title": "Week4: Grain development I",
    "section": "1 more mutate examples",
    "text": "1 more mutate examples\nCreate dataframe\n\ndf <- expand.grid(x=letters[1:4],\n                  y=1:2)\n\n\n1.1 combine columns\npaste, interaction , unite Compare the results\n\ndf%>% mutate(paste(x,y))\ndf%>% mutate(z=paste(x,y))\ndf%>% mutate(z=paste(x,y,sep = \"-\"))\ndf %>% tidyr::unite(data = .,col = \"z\",c(x,y))\ndf <- df %>% mutate(z=interaction(x,y))\n\n\n\n1.2 add columns\n\n# add identifier based on row numbers\ndf %>% mutate(id=1:n())\ndf %>% mutate(id=1:nrow(.))\n# row names\nrownames(df)\nrownames(df) <- LETTERS[1:nrow(df)]\nrownames(df)\n\n\n\n\n\n\n\npractice\n\n\n\nsubset the row where (x equals to “a”, y equals to 1) or (x equals to “c”, y equals to 2)\n\nHow many ways to achieve this? you can use dplyr::filter or [].\nObserve the row names, are they the same before and after subseting?\n\n\ndf %>% filter(z%in%c(\"a.1\",\"c.2\"))\ndf %>% filter((x==\"a\"&y==1)|(x==\"c\"&y==2))\ndf %>% .[rownames(.)%in%c(\"A\",\"G\"),]\ndf %>% with(.,.[(x==\"a\"&y==1)|(x==\"c\"&y==2),])"
  },
  {
    "objectID": "posts/Week4/index.html#conclude-your-dataframe-by-groups",
    "href": "posts/Week4/index.html#conclude-your-dataframe-by-groups",
    "title": "Week4: Grain development",
    "section": "2 Conclude your dataframe by groups",
    "text": "2 Conclude your dataframe by groups\n\n\n2.1 group_by\nLearn from examples!\n\n\n\n\n\n\npractice\n\n\n\n\nread climate.csv from data folder using relative path\nfind the sowing date (i.e., the first date) for each year (DFG_year) and each sowing treatment(sowing_date).\ncalculate thermal time based on DailyMean_Temperature\n\n\n\n\n\n2.2 how to get the minimum unique combination of dataframe?\nhow many unique year-months combinations were included in `climate 2019 for early and late sowing?\n\nclimate %>% \n  dplyr::filter(DFG_year==\"DFG2019\") %>% \n  group_by(y,m) %>% \n  summarise()\n\nclimate %>% \n  dplyr::filter(DFG_year==\"DFG2019\") %>% \n  dplyr::select(y,m) %>% \n  dplyr::distinct()\n\n\n\n2.3 wide to long\n\nclimate %>%names()\n\n [1] \"DayTime\"                \"y\"                      \"m\"                     \n [4] \"d\"                      \"DailyMean_Temperature\"  \"Acc_Temperature\"       \n [7] \"Acc_Percipitation\"      \"Acc_Radiation\"          \"DailySum_Percipitation\"\n[10] \"DailySum_Radiation\"     \"sowing_date\"            \"DFG_year\"              \n\nclimate_long <- climate %>% \n  tidyr::pivot_longer(names_to = \"Daily_Terms\",\n                      values_to = \"Daily_value\",\n                      cols = contains(\"Daily\")) \nclimate_long%>% \n  names()\n\n [1] \"DayTime\"           \"y\"                 \"m\"                \n [4] \"d\"                 \"Acc_Temperature\"   \"Acc_Percipitation\"\n [7] \"Acc_Radiation\"     \"sowing_date\"       \"DFG_year\"         \n[10] \"Daily_Terms\"       \"Daily_value\"      \n\n\n\n\n2.4 long to wide\n\nclimate %>%names()\n\n [1] \"DayTime\"                \"y\"                      \"m\"                     \n [4] \"d\"                      \"DailyMean_Temperature\"  \"Acc_Temperature\"       \n [7] \"Acc_Percipitation\"      \"Acc_Radiation\"          \"DailySum_Percipitation\"\n[10] \"DailySum_Radiation\"     \"sowing_date\"            \"DFG_year\"              \n\nclimate_long <- climate %>% \n  tidyr::pivot_longer(names_to = \"Daily_Terms\",\n                      values_to = \"Daily_value\",\n                      cols = contains(\"Daily\"))\nclimate_long%>% \n  tidyr::pivot_wider(names_from = \"Daily_Terms\",\n                     values_from = \"Daily_value\")%>% \n  names()\n\n [1] \"DayTime\"                \"y\"                      \"m\"                     \n [4] \"d\"                      \"Acc_Temperature\"        \"Acc_Percipitation\"     \n [7] \"Acc_Radiation\"          \"sowing_date\"            \"DFG_year\"              \n[10] \"DailyMean_Temperature\"  \"DailySum_Percipitation\" \"DailySum_Radiation\""
  },
  {
    "objectID": "posts/Week5/index.html",
    "href": "posts/Week5/index.html",
    "title": "Week5: Grain development II",
    "section": "",
    "text": "Welcome to the fifth course! You will learn more about dataframe wrangling:"
  },
  {
    "objectID": "posts/Week5/index.html#more-mutate-examples",
    "href": "posts/Week5/index.html#more-mutate-examples",
    "title": "Week5: Grain development II",
    "section": "more mutate examples",
    "text": "more mutate examples\nLast week’s practice.\n\ndf <- expand.grid(x=letters[1:4],\n                  y=1:2)%>%\n  # combine columns x and y \n  mutate(z=interaction(x,y))\nrownames(df) <- LETTERS[1:nrow(df)]\n\n\nreplace column\n\nreplace one column based on single condition\n\ndf %>% mutate(k=ifelse(x==\"a\",\"A\",\"B\"))\ndf %>% mutate(k=ifelse(y==1,\"A\",\"B\"))\ndf %>% mutate(k=case_when(x==\"a\"~\"A\",\n                          TRUE~\"B\"))\n\n\n\n\n\n\n\npractice\n\n\n\nMatching multiple conditions\nadd column k to df, when the condition x equals “a” and y equals 1.\n\n\n\n\nreplace one column based on multiple conditions\nin case_when syntax, TRUE before ~ stands for the else conditions.\n\ndf %>% mutate(k=case_when(x==\"a\"~\"A\",\n                          x==\"b\"~\"B\",\n                          TRUE~\"C\"))\n\n\n\nLook up table\n\nlook_table <- data.frame(x=letters,\n                         X=LETTERS)\ndf %>% merge(look_table)\n\n  x y   z X\n1 a 1 a.1 A\n2 a 2 a.2 A\n3 b 1 b.1 B\n4 b 2 b.2 B\n5 c 1 c.1 C\n6 c 2 c.2 C\n7 d 1 d.1 D\n8 d 2 d.2 D\n\n\n\n\n\n\n\n\npractice\n\n\n\nmerge is not actually replace the original column.\nWrite a function to replace letters with LETTERS. The input is a vector of lower case vector vec <- c(\"c\",\"a\",\"b\",\"d\"), output will be the matched upper case vector c(\"C\",\"A\",\"B\",\"D\").\n!!Before you start to write the code, please first write down the possible steps in text.!!\n\n\n\n\n\nadvanced mutate add-on :across\napply function for multiple columns\nacross( column_name (e.g., \"y\") or column_position (e.g., 2),FUNCTION)\nFUNCTION examples\n\nfunction(x){x +1}\n\nsyntax: ~{.x+1}\n\nfunction(x){mean(x, ...)}\n\nsyntax: ~{mean(.x,...)}\n... means the additional option other than the first input argument. For example, ... could be na.rm=True.\nNow here is one example of applying function to multiple columns\n\nclimate %>% \n  select(ends_with(\"Temperature\")) %>% \n  head(.,3) %>%\n  glimpse()\n\n\nclimate %>% \n  mutate(across(where(is.numeric),~{round(.x, digits = 2)})) %>%\n  # mutate(across(where(is.numeric),function(x){round(x, digits = 2)})) %>%\n  select(ends_with(\"Temperature\")) %>% \n  head(.,3) %>% \n  glimpse()\n\n# reduce your code chunk by using function\ndisplay <- function(x){\n  # subset dataframe and summarized for displaying purporse\n  # x: input data frame\n  x %>% \n    dplyr::select(ends_with(\"Temperature\")) %>% \n    head(.,3) %>% \n    dplyr::glimpse()\n}\n\nclimate %>% \n  mutate(across(where(is.numeric),~{round(.x, digits = 2)})) %>%\n  display()"
  },
  {
    "objectID": "posts/Week5/index.html#matching-multiple-conditions",
    "href": "posts/Week5/index.html#matching-multiple-conditions",
    "title": "Week5: Grain development II",
    "section": "2 Matching multiple conditions",
    "text": "2 Matching multiple conditions\nadd column k to df, when the condition x equals “a” and y equals 1."
  },
  {
    "objectID": "posts/Week5/index.html#conclude-your-dataframe-by-groups",
    "href": "posts/Week5/index.html#conclude-your-dataframe-by-groups",
    "title": "Week5: Grain development II",
    "section": "Conclude your dataframe by groups",
    "text": "Conclude your dataframe by groups\n\n\ngroup_by()\nLearn from examples!\n\n\n\n\n\n\npractice\n\n\n\n\nread climate.csv from data folder using relative path\nfind the sowing date (i.e., the first date) for each year (DFG_year) and each sowing treatment(sowing_date).\ncalculate thermal time based on DailyMean_Temperature\n\n\n\n\n\nhow to get the minimum unique combination of dataframe?\nhow many unique year-months combinations were included in `climate 2019 for early and late sowing?\n\nclimate %>% \n  dplyr::filter(DFG_year==\"DFG2019\") %>% \n  group_by(y,m) %>% \n  summarise()\n\nclimate %>% \n  dplyr::filter(DFG_year==\"DFG2019\") %>% \n  dplyr::select(y,m) %>% \n  dplyr::distinct()\n\n\n\nwide to long\n\nclimate %>%names()\n\n [1] \"DayTime\"                \"y\"                      \"m\"                     \n [4] \"d\"                      \"DailyMean_Temperature\"  \"Acc_Temperature\"       \n [7] \"Acc_Percipitation\"      \"Acc_Radiation\"          \"DailySum_Percipitation\"\n[10] \"DailySum_Radiation\"     \"sowing_date\"            \"DFG_year\"              \n\nclimate_long <- climate %>% \n  tidyr::pivot_longer(names_to = \"Daily_Terms\",\n                      values_to = \"Daily_value\",\n                      cols = contains(\"Daily\")) \nclimate_long%>% \n  names()\n\n [1] \"DayTime\"           \"y\"                 \"m\"                \n [4] \"d\"                 \"Acc_Temperature\"   \"Acc_Percipitation\"\n [7] \"Acc_Radiation\"     \"sowing_date\"       \"DFG_year\"         \n[10] \"Daily_Terms\"       \"Daily_value\"      \n\n\n\n\nlong to wide\n\nclimate %>%names()\n\n [1] \"DayTime\"                \"y\"                      \"m\"                     \n [4] \"d\"                      \"DailyMean_Temperature\"  \"Acc_Temperature\"       \n [7] \"Acc_Percipitation\"      \"Acc_Radiation\"          \"DailySum_Percipitation\"\n[10] \"DailySum_Radiation\"     \"sowing_date\"            \"DFG_year\"              \n\nclimate_long <- climate %>% \n  tidyr::pivot_longer(names_to = \"Daily_Terms\",\n                      values_to = \"Daily_value\",\n                      cols = contains(\"Daily\"))\nclimate_long%>% \n  tidyr::pivot_wider(names_from = \"Daily_Terms\",\n                     values_from = \"Daily_value\")%>% \n  names()\n\n [1] \"DayTime\"                \"y\"                      \"m\"                     \n [4] \"d\"                      \"Acc_Temperature\"        \"Acc_Percipitation\"     \n [7] \"Acc_Radiation\"          \"sowing_date\"            \"DFG_year\"              \n[10] \"DailyMean_Temperature\"  \"DailySum_Percipitation\" \"DailySum_Radiation\""
  },
  {
    "objectID": "posts/Week5/index.html#spikelet-position-practice",
    "href": "posts/Week5/index.html#spikelet-position-practice",
    "title": "Week5: Grain development II",
    "section": "Spikelet position practice",
    "text": "Spikelet position practice\n\nread real data\nread kernel_combine.csv in folder data using relative path. subset column tiller which match pattern M.\nHow can you get the unique combination of car,var,nitrogen and time? Which combinations of functions can you use?\n\n\n\n\n\n\nchallenge\n\n\n\n\n\n\ndat %>% \n  group_by(car,var,nitrogen,time) %>% \n  summarise()\n\n\n\n\n\n\nread your own data\nGo to HU-box, download the student folder.\n\n\n\n\n\n\nPractice\n\n\n\n\nlist the file name in the folder using relative path\nread the file based on the name listed.\nadd a column containing student name information\ncombined the result in one\n\n\n\n\n\n\n\n\n\nPractice\n\n\n\n\ndo data summary for each file, compare the range of three files.\nVisualize it with ggplot, differentiate the data from each student by color.\n\n\n\n\n\nclassify spikelet based on position\nthe spike of the main shoot was dissected to count the total number of floret in\n\nbasal (third-fifth spikelet from the bottom)\ncentral (middle spikelets)\napical (third-fifth spikelet from the top) spikelets throughout the spike reference\n\n\n\n\n\n\nbasic summary of kernel development summ for single spike\n\nSp: total spikelet\nFl: maximum floret\nsfl: total floret\nkf: total full kernel\nkh: total half kernel\nks: total small kernel\nkp: potential kernel number\nfr: filling rate\nfc: potential filling rate\n\n\n\nRows: 681\nColumns: 15\nGroups: nitrogen, time, var, rep, tiller [227]\n$ nitrogen <chr> \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"~\n$ time     <chr> \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"~\n$ var      <chr> \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\"~\n$ rep      <int> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 1, 1, 1, 2, 2, 2~\n$ tiller   <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"~\n$ type     <chr> \"apical\", \"basal\", \"central\", \"apical\", \"basal\", \"central\", \"~\n$ Sp       <int> 16, 6, 11, 19, 7, 13, 17, 6, 11, 19, 7, 13, 19, 7, 13, 16, 6,~\n$ Fl       <int> 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4~\n$ sfl      <int> 19, 18, 20, 21, 21, 24, 22, 20, 20, 21, 22, 24, 18, 21, 24, 1~\n$ kf       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ kh       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~\n$ ks       <int> 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0~\n$ kp       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ fr       <dbl> 0.5263158, 0.4444444, 0.6500000, 0.6666667, 0.5238095, 0.7500~\n$ fc       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~\n\n\n\n\nData wrangling and plot with facet"
  },
  {
    "objectID": "posts/Week5/index.html#for-loop",
    "href": "posts/Week5/index.html#for-loop",
    "title": "Week5: Grain development II",
    "section": "For loop",
    "text": "For loop\nuse for loop for repetitive tasks.\n\nfilename <- c('grain_counting_practice_studentName1.xlsx',\n              'grain_counting_practice_studentName2.xlsx')\nfile_list<- filename %>% strsplit(\"_\")\n# tradition way of for loop\nres <- c()\nfor(i in 1:2){\n  res <- c(res,file_list[[i]][4])\n}\n\n# alternative in r package purrr\n# chr stands for the \"character\" output.\npurrr::map_chr(1:length(file_list),  ~{\n  file_list[[.x]][4]\n})\n\n# notice that the output of map_chr must be 1 element per iteration.\npurrr::map_chr(filename,  ~{\n  .x %>% strsplit(\"_\") %>% unlist()\n})\n\n# equivalent\npurrr::map(filename,  ~{\n  .x %>% strsplit(\"_\") %>% unlist()\n})\n\nlapply(filename,function(x){\n  x %>% strsplit(\"_\") %>% unlist()\n})\n\n\n\n\n\n\n\nchallenge\n\n\n\n\n\nUsing for loop, create a vector contained only the student name but replace the \".xlsx\" suffix. Search on google. What would be your keyword?"
  }
]