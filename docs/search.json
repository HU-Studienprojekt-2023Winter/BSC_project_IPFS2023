[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BSC_project_IPFS2023",
    "section": "",
    "text": "Week3: Spikelet development\n\n\n\n\n\n\n\nR-basic\n\n\n\n\n\n\n\n\n\n\n\nMay 2, 2023\n\n\nTien-Cheng\n\n\n\n\n\n\n  \n\n\n\n\nWeek2: The growth of spike in winter wheat\n\n\n\n\n\n\n\nR-basic\n\n\n\n\n\n\n\n\n\n\n\nApr 25, 2023\n\n\nTien-Cheng\n\n\n\n\n\n\n  \n\n\n\n\nWeek1: Phenology and the growth of spike\n\n\n\n\n\n\n\nR-basic\n\n\n\n\n\n\n\n\n\n\n\nApr 18, 2023\n\n\nTien-Cheng\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This blog was build for the IPFS BSC project course 2023 summer sumester.\nQuestion? plese contact Tien-Cheng Wang."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Week1/index.html",
    "href": "posts/Week1/index.html",
    "title": "Week1: Phenology and the growth of spike",
    "section": "",
    "text": "Welcome to the first course! During the following 2 hrs, you will learn data type of vectors, function and %>%.\n\n\n\n\n\n\nNote\n\n\n\n\n4 basic data types: (“chr”,“numeric”,“logical”,“Date”)\nfunctions, documentation and data type check\nmeaning of %>% and .\n\nindexing with pattern matching\n\n\n\nPlease make sure you have installed R & Rstudio.\nDownload the folder from HU-box.\nOpen Ear_development_BSC_project.Rproj\n\n\nPress Ctrl+ Shift +Nto open new script.Save it as Week1_practice.R Copy code from this website to your script and press run.\nSave ### Concept of datatype & case sensitive Rules:\n\nDon’t compete your variable names with system. (eg., var,mean,aov)\n\nsomething that will show in the drop down menu of auto-completion.\n\nDon’t start with number.\nSeparate long name with _.\n\n\nvariable\n# assignment str\"v\" to name \"variable\"\n## \"\" and unquote str and variable \n\nvariable <- \"v\"\nVariable <- 1\nvariable +1\nVariable +1 \n\n\n\n\n# str??\nstr\n?str\nstr(variable)\nstr(Variable)\n# data type coersion\nstr(NA)\nstr(c(NA,1))\nstr(c(NA,\"a\"))\nstr(c(NA,TRUE))\nstr(c(1,\"a\"))\n\n\n\n\nCheck this great package tidyverse!\n\nNote that windows user may need to first download the Rtools that match your R version.\n\nYou can check your R version by typing version() in your R console.\n\ninstall.packages(tidyrverse)\ninstall.packages(\"tidyrverse\")\nlibrary(dplyr)\n\n\n\n\nPipe (%>%) is available in r-package either dplyr or magrittr.\nPlease use %>% to avoid embedded functions.\n.stands for the result from the left side of the pipe.\nFor long line code, press enter after each %>%.\nSelect all the codes by ctrl A.\nIndent the selected codes by ctrl I.\n\n# syntax of using pipe\n\nfun1(object)\n\nobject %>% fun1(.)\nobject %>% fun1()\nobject %>% fun1() %>% .\nobject %>% fun1(.) %>% .\n\n#embedded functions\nfun2(fun1(object))\n# pipe\nobject %>% \n  fun1() %>% \n  fun2()\n\n\n# how many ways of creating a sequence?\nc(1,2,3)\nseq(1,3,1)\n\n# embedded function : fun2(fun1())\nlength(c(1,2,3))\n# use pipe, \".\" is the result of previous step\nc(1,2,3) %>% length(.)\n\n# replicate element as vector\nrep(1,3)\n# remove duplicates\nrep(1,3) %>% unique()\n# cumulative sum \nrep(1,3) %>% cumsum()\n\n# is there any difference?\npaste(c(\"a\",\"1\"),collapse = \"\")\npaste0(c(\"a\",\"1\"))\npaste0(\"a\",\"1\")\n\n\n\n\n\n\n\nChallenge\n\n\n\nUse str() to check the data type of above line.\nYou have two vectors, c(\"a\",\"b\") and c(\"1\",\"2\")\nHow to use paste and repto create sequence of char vector shown below?\nCheck the arguments of rep to get more hints. e.g.,\nrep(c(\"a\",\"b\"),each=2)\nrep(c(\"a\",\"b\"),times=2)\n\n\n\n\n[1] \"a1\" \"a2\" \"b1\" \"b2\"\n\n\n[1] \"a1\" \"b1\" \"a2\" \"b2\"\n\n\n\n\n\nformat: function_name(argument1, argument2) {code} example:\n\nplusone <- function(x){\n  x+1\n}\n# is function data type sensitive?\nplusone(variable)\nplusone(Variable) \n\nfunction with good documentation example:\n\nfunction_name  <-function(input){\n  # input: datatype, length, meaning.\n  # output: datatype, length, meaning.\n  # action1: intermediate_variable <- input %>% fun1()\n  # action2: output <-intermediate_variable%>% fun2()\n  ...\n  return(output)\n}\n\n\n\n\n\n\n\nChallenge\n\n\n\nwrite a function with documentation: input vec is a numeric vector with length 3, return str of average value of vec ± standard deviation of vec.\nVisualize the step in your function by first writing your the possible steps in text!\n\n\n\n\n\n\nas.Date(\"2023-04-17\")\nas.Date(\"2023-04-17\",format=\"%Y-%m-%d\")\n# is ther any error?\nas.Date(\"20230417\")\nas.Date(\"17042023\")\n# additive properties of Date \nas.Date(\"2023-04-17\")-7\nas.Date(\"2023-04-17\")+2\n\n\n\n\n\n\n\nChallenge\n\n\n\nSince type Date is additive, how to create successive date vector of length 5? Vector date start with “2023-04-17”\nCould you do the average of this vector?\n\n\n\n\n[1] \"2023-04-17\" \"2023-04-18\" \"2023-04-19\" \"2023-04-20\" \"2023-04-21\"\n\n\n\n\n\n\n# check if pattern exist in vector\n3%in%c(1,3) \n2%in%c(1,3) \n\n1==2 \n!1==2 \n1!=2 \nc(1,3)==2\n\nwhich(c(1,3)==3) \n\n# what will be the difference?\norder(c(3,1,2)) \nc(3,1,2) %>% .[order(.)]\n\n# what will be the data type? check with str()\nc(1,2,NA) %>% is.na() \nc(1,2,NA) %>% is.na() %>% which() \nc(1,2,NA) %>% is.na() %>% !.\nc(1,2,NA) %>% !is.na() \n!is.na(c(1,2,NA))\n\n# check if data type match\narg <- \"\"\nis.character(arg)\nif(is.character(arg)){\n  print(\"character\")\n}\n\nif(is.character(arg)){\n  print(\"character\")\n}else{\n  error(\"type other than character\")\n}\n\nif(is.character(arg)){\n  warning(\"wrong\")\n}\n\nif(is.character(arg)){\n  stop(\"wrong\")\n}\n\n\n\n\n\n\n\nChallenge\n\n\n\nInside your plusone function, please check first whether input x is numeric, then proceed the process.\nif not, return with message “wrong input type” using stop()"
  },
  {
    "objectID": "posts/Week3/index.html",
    "href": "posts/Week3/index.html",
    "title": "Week3: Spikelet development",
    "section": "",
    "text": "Welcome to the third course! During the following 2 hrs, you will learn ggplot and dataframe wrangling:"
  },
  {
    "objectID": "posts/Week3/index.html#read-data-and-rproject",
    "href": "posts/Week3/index.html#read-data-and-rproject",
    "title": "Week3: Spikelet development",
    "section": "0.1 Read data and Rproject",
    "text": "0.1 Read data and Rproject\n\n0.1.1 practice dataframe with real data\n\ndata <- read.csv(\"data/ear_summarized.csv\")\n# data %>% str()\ndata %>% glimpse()\nnames(data)\n# extract column from dataframe\ndata$BBCH\ndata %>% unique()\n\n# summarize dataframe\nlapply(data, range)\n# turn as data frame\nlapply(data, range) %>% data.frame()\n\nsummary(data)"
  },
  {
    "objectID": "posts/Week3/index.html#data-format-overview",
    "href": "posts/Week3/index.html#data-format-overview",
    "title": "Week3: Spikelet development",
    "section": "0.3 Data format overview",
    "text": "0.3 Data format overview\n\n# path <- getwd() %>% sub(\"posts.*\",\"data\",.)\n# dat <-read.csv(paste0(path,'/kernel_combine.csv'))\ndat <-read.csv('./data/kernel_combine.csv',\n                header = T,stringsAsFactors = F) %>%\n  dplyr::filter(tiller==\"M\")\nglimpse(dat)"
  },
  {
    "objectID": "posts/Week3/index.html#classify-spikelet-based-on-position",
    "href": "posts/Week3/index.html#classify-spikelet-based-on-position",
    "title": "Week3: Spikelet development",
    "section": "1.1 classify spikelet based on position",
    "text": "1.1 classify spikelet based on position\nthe spike of the main shoot was dissected to count the total number of floret in\n\nbasal (third-fifth spikelet from the bottom)\ncentral (middle spikelets)\napical (third-fifth spikelet from the top) spikelets throughout the spike reference\n\n\ndat %<>%\n  group_by(car,var,nitrogen,time,rep) %>% \n  mutate(type=cut(spike,3) %>% as.numeric(),\n         type=case_when(type==1~\"basal\",\n                        type==2~\"central\",\n                        T~\"apical\")) %>% \n  group_by(car,var,nitrogen,time,rep,type) %>% \n  dplyr::arrange(spike) %>% \n  mutate(Fl=seq(1,n())) %>% \n  dplyr::arrange(var,nitrogen,time,rep,spike)\nglimpse(dat)\n\nRows: 4,749\nColumns: 13\nGroups: car, var, nitrogen, time, rep, type [681]\n$ car          <int> 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, ~\n$ nitrogen     <chr> \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1~\n$ time         <chr> \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1~\n$ var          <chr> \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Al~\n$ rep          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, ~\n$ tiller       <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M~\n$ spike        <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1,~\n$ flower       <int> 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 2, 2, 2, ~\n$ kernel.full  <int> 0, 0, 1, 2, 3, 2, 2, 3, 3, 3, 2, 3, 2, 2, 1, 2, 0, 0, 0, ~\n$ kernel.half  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ kernel.small <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ type         <chr> \"basal\", \"basal\", \"basal\", \"basal\", \"basal\", \"basal\", \"ce~\n$ Fl           <int> 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, ~"
  },
  {
    "objectID": "posts/Week3/index.html#lookuptable-of-treatment-not-yet",
    "href": "posts/Week3/index.html#lookuptable-of-treatment-not-yet",
    "title": "Week3: Spikelet development",
    "section": "1.2 lookuptable of treatment (not yet)",
    "text": "1.2 lookuptable of treatment (not yet)"
  },
  {
    "objectID": "posts/Week3/index.html#basic-summary-of-kernel-development-summ-for-single-spike",
    "href": "posts/Week3/index.html#basic-summary-of-kernel-development-summ-for-single-spike",
    "title": "Week3: Spikelet development",
    "section": "1.3 basic summary of kernel development summ for single spike",
    "text": "1.3 basic summary of kernel development summ for single spike\nSp: total spikelet\nFl: maximum floret \nsfl: total floret\nkf: total full kernel\nkh: total half kernel\nks: total small kernel\nkp: potential kernel number \nfr: filling rate \nfc: potential filling rate\n\nsum.dat <- dat %>% \n  dplyr::group_by(nitrogen,time,var,rep,tiller,type) %>% \n  dplyr::summarise(\n    Sp=max(spike),#total spikelet\n    Fl=max(flower),# maximum floret \n    sfl=sum(flower),# total floret\n    kf=sum(kernel.full),# total full kernel\n    kh=sum(kernel.half),# total half kernel\n    ks=sum(kernel.small),# total small kernel\n    kp=kf+kh,# potential kernel number \n    fr=kf/sfl,# filling rate \n    fc=kf/kp)#potential filling rate\nglimpse(sum.dat)\n\nRows: 681\nColumns: 15\nGroups: nitrogen, time, var, rep, tiller [227]\n$ nitrogen <chr> \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"~\n$ time     <chr> \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"~\n$ var      <chr> \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\"~\n$ rep      <int> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 1, 1, 1, 2, 2, 2~\n$ tiller   <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"~\n$ type     <chr> \"apical\", \"basal\", \"central\", \"apical\", \"basal\", \"central\", \"~\n$ Sp       <int> 16, 6, 11, 19, 7, 13, 17, 6, 11, 19, 7, 13, 19, 7, 13, 16, 6,~\n$ Fl       <int> 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4~\n$ sfl      <int> 19, 18, 20, 21, 21, 24, 22, 20, 20, 21, 22, 24, 18, 21, 24, 1~\n$ kf       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ kh       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~\n$ ks       <int> 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0~\n$ kp       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ fr       <dbl> 0.5263158, 0.4444444, 0.6500000, 0.6666667, 0.5238095, 0.7500~\n$ fc       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~"
  },
  {
    "objectID": "posts/Week3/index.html#data-wrangling-and-plot-with-facet",
    "href": "posts/Week3/index.html#data-wrangling-and-plot-with-facet",
    "title": "Week3: Spikelet development",
    "section": "1.4 Data wrangling and plot with facet",
    "text": "1.4 Data wrangling and plot with facet\n\nlong_format <- dat %>% \n  tidyr::pivot_longer(cols=c(nitrogen,time),\n                      names_to = \"treatment\",\n                      values_to = \"levels\") %>% \n  group_by(spike,var,treatment,levels,type,rep) %>%\n  summarise(fertile_flower=max(kernel.full)) %>% \n  group_by(spike,var,treatment,levels,type) %>%\n  summarise(fertile_flower=mean(fertile_flower))\n\nlong_format%>% \n  filter(fertile_flower<10) %>% \n  ggplot(aes(fertile_flower,spike,color=type,shape=levels))+\n  geom_point()+\n  facet_grid(treatment~var)+\n  theme_classic()+\n  scale_x_continuous(limits = c(0,5),breaks=seq(0,4))"
  },
  {
    "objectID": "posts/Week1/index.html#working-directory",
    "href": "posts/Week1/index.html#working-directory",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1 Working directory",
    "text": "1 Working directory\n\ngetwd()\n# read.csv()# try to read one file"
  },
  {
    "objectID": "posts/Week1/index.html#concept-of-datatype-case-sensitive",
    "href": "posts/Week1/index.html#concept-of-datatype-case-sensitive",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.1 Concept of datatype & case sensitive",
    "text": "1.1 Concept of datatype & case sensitive\n\nvariable\n# assignment str\"v\" to name \"variable\"\n## \"\" and unquote str and variable \n\nvariable <- \"v\"\nVariable <- 1\nvariable +1\nVariable +1"
  },
  {
    "objectID": "posts/Week1/index.html#the-reason-of-error-data-type",
    "href": "posts/Week1/index.html#the-reason-of-error-data-type",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "3 the reason of error – data type",
    "text": "3 the reason of error – data type\n\n# str??\nstr\n?str\nstr(variable)\nstr(Variable)\n# data type coersion\nstr(NA)\nstr(c(NA,1))\nstr(c(NA,\"a\"))\nstr(c(NA,TRUE))\nstr(c(1,\"a\"))"
  },
  {
    "objectID": "posts/Week1/index.html#function-argument1-argument2",
    "href": "posts/Week1/index.html#function-argument1-argument2",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "0.4 function (argument1, argument2)",
    "text": "0.4 function (argument1, argument2)\n\nc(1,2,3)\nseq(1,3,1)\n# embeded function fun2(fun1(argument))\nlength(c(1,2,3))\nstr(c(1,2,3))\n\nrep(1,3)\nrep(1,3) %>% unique()\nrep(1,3) %>% cumsum()"
  },
  {
    "objectID": "posts/Week1/index.html#write-your-first-function",
    "href": "posts/Week1/index.html#write-your-first-function",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.6 write your first function",
    "text": "1.6 write your first function\n\nplusone <- function(x){x+1}\n# is function data type sensitive?\nplusone(variable)\nplusone(Variable)\n\n\n\n\n\n\n\nChallenge\n\n\n\nwrite a average function and check whether input is numeric if not return with warning *first write your function in text"
  },
  {
    "objectID": "posts/Week1/index.html#function-argument1-argument2-code",
    "href": "posts/Week1/index.html#function-argument1-argument2-code",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "4 function (argument1, argument2) {code}",
    "text": "4 function (argument1, argument2) {code}\n\nc(1,2,3)\nseq(1,3,1)\n# embeded function fun2(fun1(argument))\nlength(c(1,2,3))\nstr(c(1,2,3))\n\nrep(1,3)\nrep(1,3) %>% unique()\nrep(1,3) %>% cumsum()"
  },
  {
    "objectID": "posts/Week1/index.html#indexing",
    "href": "posts/Week1/index.html#indexing",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "6 indexing",
    "text": "6 indexing\n\n3%in%c(1,3) \n2%in%c(1,3) \n1==2 \n!1==2 \n1!=2 \nwhich(c(1,3)==3) \norder(c(3,1,2)) \nc(3,1,2) %>% .[order(.)]\n\nc(1,2,NA) %>% is.na() c(1,2,NA) %>% is.na() %>% which() c(1,2,NA) %>% is.na() %>% !. c(1,2,NA) %>% !is.na() !is.na(c(1,2,NA) )\n\n\ndata.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1),\n           temp=c(20,15,13), \n           thermal_time=cumsum(temp))\n\ndf <- data.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1),\n                 temp=c(20,15,13), thermal_time=cumsum(c(20,15,13)))\n\ndf$temp %>% str()\ndf[\"temp\"] %>% str()\ndf[,\"temp\"] %>% str()\ndf[[\"temp\"]] %>% str()"
  },
  {
    "objectID": "posts/Week1/index.html#check-data-type",
    "href": "posts/Week1/index.html#check-data-type",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.2 Check data type",
    "text": "1.2 Check data type\n\n# str??\nstr\n?str\nstr(variable)\nstr(Variable)\n# data type coersion\nstr(NA)\nstr(c(NA,1))\nstr(c(NA,\"a\"))\nstr(c(NA,TRUE))\nstr(c(1,\"a\"))"
  },
  {
    "objectID": "posts/Week1/index.html#function-something-with",
    "href": "posts/Week1/index.html#function-something-with",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.3 Function: something with ()",
    "text": "1.3 Function: something with ()\nformat: function_name(argument1, argument2) {code}\n\n# how many ways of creating sequence?\nc(1,2,3)\nseq(1,3,1)\n\n# embeded function fun2(fun1())\nlength(c(1,2,3))\n# use pipe, . is the result of previous step\nc(1,2,3) %>% length(.)\n\n# what is the data type?\nstr(c(1,2,3))\n\n# replicate\nrep(1,3)\nrep(1,3) %>% unique()\nrep(1,3) %>% cumsum()\n\npaste(c(\"a\",\"1\"),collapse = \"\")\npaste0(c(\"a\",\"1\"))\n\n\n\n\n\n\n\nChallenge\n\n\n\nhow to use pasteand repto create sequence of char vector c(“a1”,“b1”,“a2”,“b2”)?\n\n\n\n\n[1] \"a1\" \"a2\" \"b1\" \"b2\"\n\n\n[1] \"a1\" \"b1\" \"a2\" \"b2\""
  },
  {
    "objectID": "posts/Week1/index.html#pattern-matching-logical-vector-and-its-position",
    "href": "posts/Week1/index.html#pattern-matching-logical-vector-and-its-position",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.7 pattern matching: logical vector and its position",
    "text": "1.7 pattern matching: logical vector and its position\n\n3%in%c(1,3) \n2%in%c(1,3) \n1==2 \n!1==2 \n1!=2 \n\nwhich(c(1,3)==3) \n# what will be the difference\norder(c(3,1,2)) \nc(3,1,2) %>% .[order(.)]\n\n# what will be the data type?\nc(1,2,NA) %>% is.na() \nc(1,2,NA) %>% is.na() %>% which() \nc(1,2,NA) %>% is.na() %>% !.\nc(1,2,NA) %>% !is.na() \n!is.na(c(1,2,NA))"
  },
  {
    "objectID": "posts/Week1/index.html#indexing-something-with-or",
    "href": "posts/Week1/index.html#indexing-something-with-or",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.8 Indexing something with [] or $",
    "text": "1.8 Indexing something with [] or $\n\n# why this will not work?\ndata.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1),\n           temp=c(20,15,13), \n           thermal_time=cumsum(temp))\ndf\n\n\n\n\n\n\n\nChallenge\n\n\n\ncreate data frame to calculate thermal time\n\n\n\n\n        time temp thermal_time\n1 2023-04-17   20           20\n2 2023-04-18   15           35\n3 2023-04-19   13           48\n\n\n\n# which is of type dataframe?\ndf$temp %>% str()\ndf[\"temp\"] %>% str()\ndf[,\"temp\"] %>% str()\ndf[[\"temp\"]] %>% str()"
  },
  {
    "objectID": "posts/Week1/index.html#date",
    "href": "posts/Week1/index.html#date",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.5 Date",
    "text": "1.5 Date\n\n\n\n\n\n\n\n\n\nChallenge\n\n\n\nif Date is additive, how to create successive Date vector? Date start with “2023-04-17”\n\n\n\n\n[1] \"2023-04-17\" \"2023-04-18\" \"2023-04-19\" \"2023-04-20\" \"2023-04-21\""
  },
  {
    "objectID": "posts/Week1/index.html#r-packages",
    "href": "posts/Week1/index.html#r-packages",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.4 r packages",
    "text": "1.4 r packages\nhttps://dplyr.tidyverse.org/"
  },
  {
    "objectID": "posts/Week1/index.html#name-rules",
    "href": "posts/Week1/index.html#name-rules",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.9 name rules",
    "text": "1.9 name rules"
  },
  {
    "objectID": "posts/Week1/index.html#section",
    "href": "posts/Week1/index.html#section",
    "title": "Week1: The growth of spike in winter wheat",
    "section": "1.10 ",
    "text": "1.10 \n#Plot Open Ear_development_BSC_project.Rproj, go to file, src, open Week1.R ## Working directory\n\ngetwd()\n# read.csv()# try to read one file"
  },
  {
    "objectID": "posts/Week2/index.html",
    "href": "posts/Week2/index.html",
    "title": "Week2: The growth of spike in winter wheat",
    "section": "",
    "text": "Welcome to the second course! You will learn working directory, subset elements from vector, list and dataframe\n\n\n\n\n\n\nNote\n\n\n\n\nWhat is working directory (wd)?\nHow to subset elements from vector, list and dataframe\n\n\n\nIf you haven’t download the data, please go to HU-box.\nOpen Ear_development_BSC_project.Rproj\ncreate Week2.R and save it in folder src.\n\n\n\n\n\".\" means the working directory (wd) where this R script exists.\n\"..\" means the parent (one level higher) directory of \".\".\n\nlibrary(dplyr)\n\n# working directory, abbreviated as \".\"\ngetwd()\n# parent directory, abbreviated as \"..\"\ndirname(getwd())\n# assign current path to variable\ncurrent_path <- getwd()\n# check the type \ncurrent_path %>% str()\n\n\n# check files in the directory\n\n# are they different?\n\".\" %>% list.files(path=.)\ngetwd() %>% list.files(path=.)\n\n# are they different?\n\"..\" %>% list.files(path=.)\ngetwd() %>% dirname() %>% list.files(path=.)\n\n\n\n\n\n\n\nChallenge\n\n\n\nAlthough the meaning of . is the same as getwd(), the content is depending on the environment you are working with.\nRight click R studio logo, open a new R studio window, compare the result of getwd() in R project and R\n\n\n\n\n\nWhich one do you prefer? Why do we prefer relative path?\n\n# absolute path, did you get error?\n\"C:/Users/marse/seadrive_root/Tien-Che/My Libraries/PhD_Tien/Project/Postdoc_teaching/BSC_project_IPFS2023/data\" %>% list.files(path=.)\n# relative path in R base\nparent_path <- getwd() \npaste0(parent_path,\"/data\") %>% list.files(path=.)\n\n# R project relative path, are they different? \n\".\\data\" %>% list.files(path=.)\n\"data\" %>% list.files(path=.)\n\n\n\n\n\n\n\nChallenge\n\n\n\nread from relative path, which one is correct? Assume working directory current_path is \"C/users/BSC_project/src\"\nAbsolute_path = current_path +\"/\"+relative_path Below are four relative paths. Please rewrite them in absolute (full) path form. What should . be replace? Which two are the same? Based on the figure illustated below, path 1-4 should be A,B,C or D?\n\n\"ear_summarized.csv\"\n\"data/ear_summarized.csv\"\n\"./data/ear_summarized.csv\"\n\"../data/ear_summarized.csv\"\n\n\n\n\n\n\n\n\nvector indexing start from 1 to the length of the vector.\n\nempty_vec <- c()\nlength(empty_vec)\n# what is the type of the empty vec?\nempty_vec %>% str()\n\n# NULL: empty \nempty_vec[1]\nempty_vec[0]\n\n\nvec <- c(1,3,5)\nvec[1]\n#reorder the vector \nvec[c(2,1,3)]\n# removing the indexed elements\nvec[-1]\nvec[-2]\n\n# indexing start from 1, not 0\n# therefore you get, numeric(0)\nvec[0]\n# when access exceeding the range of a vector, what datatype do you get? \nvec[4]\nvec %>% .[length(.)+1]\nvec[1:4]\nvec[4:1]\n\n# find specific element or position\nvec[c(F,T,F)]\nvec[vec==5]\n# when codition not match at all, it will return? \nvec[vec==2]\nvec[c(F,F,F)]\nvec %>% .[c(F)]\nvec[vec==\"a\"]\n\n# default str vector\nletters\nLETTERS\n# when the query does not match, guess what will be the datatype? \nletters %>% .[.==2]\nletters %>% .[c(F)]\n# vector over write\nvec\nvec <- c(2,1,3)\nvec\n\n\n\n\n\n\n\nChallenge\n\n\n\n\nvec <- c(1, 2, 3, 4, 5)\nlogical_vec <- c(TRUE, FALSE)\nsubset_vec <- vec[logical_vec]\nsubset_vec\n\n[1] 1 3 5\n\n\nwhat did you observe? Is there any vector recycling?\nWhat happen when you enter vec[TRUE]?\n\n\nSupplementary information of special datatypes:\nEmpty : NULL\nIndexing at zero position:numeric(0)\n\n\nlist_object<- list(element_name=value) Make a list is like put a cookie(content of list element) in the cookie jar(list element).\nThere are 3 common accessors for list: 1. access the list element (cookie jar)\n[] access the list position\n\nacess the content of list element (cookie)\n\n[[]] access the content of a list element by position or name\n$ access the content of a list element by name\nlist_object$element_name or list_object[[element_name]]   More about the accessors\n\n# create a simple list\nlist(1)\n# create a simple list with name \"x\" for first element\nlist(x=1)\nlist(x=1)[\"x\"]\n# extract content\nlist(x=1)$\"x\"\nlist(x=1)[[1]]\nlist(x=1)[[\"x\"]]\n\n# extract with pipe\nlist(x=1) %>% .[[1]]\nlist(x=1) %>% .$\"x\"\n\n# long list\nlong_list_example <- list(1,c(1,2),\n                          T,c(T,T),\n                          \"str\",c(\"a\",\"b\"),\n                          list(1),\n                          mean,data.frame())\n# check structure of this list \n# list_complex_example %>% str()\n# list_complex_example %>% glimpse()\n# list_complex_example\n# first list \nlong_list_example[1]\n# content of first list\nlong_list_example[[1]]\n# first element of content of first list\nlong_list_example[[1]][1]\n\n\n\n\n\n\n\nChallenge\n\n\n\ncan you guess what data type are these?\n\n# non-sense\nlong_list_example[[1]][2]\nlong_list_example[1][1]\nlong_list_example[1][2]\nlong_list_example[2][2]\n# meaningful\nlong_list_example[[2]][2]\n\n\n\n\n\n\nlapply(vector, function) ?lapply\n\n# input is vector\nc(1,4) %>% \n  lapply(.,FUN=function(x){x+3})\n# input is list\nlist(2,4,c(1,4)) %>% \n  lapply(.,FUN=function(x){x+3})\n# input has differnt type\nlist(2,4,c(1,4),\"8\") %>% \n  lapply(.,FUN=function(x){x+3})\n\n\n\n\n\n\n\nChallenge\n\n\n\nWhy you get error in the last line?\n\n\n\n\n\neach column has one data type\n\n# create a dataframe \ndf <- data.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1),                 temp=c(20,15,13), \n                 thermal_time=cumsum(c(20,15,13)))\n# another way\ndf <- data.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1)) \ndf$temp=c(20,15,13)\ndf$thermal_time=cumsum(df$temp)\n\n# third method\nlibrary(dplyr)\ndf <- data.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1)) %>% \n  mutate(temp=c(20,15,13), \n         thermal_time=cumsum(temp))\ndf\n\n\n\n\n\n\n\nChallenge\n\n\n\nIs it possible to create data frame with vectors of different length?\n\ndata.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1),                 temp=c(20,13))\n\n\n\n\n\n\nYou can subset dataframe by indexing [row,column]\ndataframe[,column] select the whole role for selected columnn\ndataframe[row,] select the whole column of selected rows\nSelect multiple row or column by puting logical or numeric vector in the square bracket.\n\n\n\n\n\n\n\n\n\nChallenge\n\n\n\nuse df, 1. Access column thermal_time as vector\n\nExtract temp when time is 2023-04-17\nExtract first row and first column with [1,]and [,1]\n\n\n\n\n\n\n\n\n\nChallenge\n\n\n\nif you want to turn a data frame (df) by 90 degree (“transpose”), which function can you use? Could you find the answer on google or chatGPT?"
  },
  {
    "objectID": "posts/Week2/index.html#plot",
    "href": "posts/Week2/index.html#plot",
    "title": "Week2: The growth of spike in winter wheat",
    "section": "Plot",
    "text": "Plot\n\nGGplot2\nRequirements of scientific plot. 1. axis title with unit if there is any.\n\nlegend title full name instead of default abbreviation.\n\nFigure title.\nggplot 2 ggplot gallery\n\nlibrary(ggplot)\nlibrary(ggplot2)\n\n\ndata %>% \nggplot(aes(x=date,y=weight,color=var))+\ngeom_point()+\ngeom_line(aes(group=group))+ # link the point by group.\nxlab(\"date of harvest\")+ #x axis title\nylab(\"ear weight(g)\")+   #y axis title\nguides(color=guide_legend(title=\"Cultivar\")) #change legend title \n\n\n\n\nFigure 1: Growth of ear weight over time.\n\n\n\n\n\n\n\n\n\n\nChallenge\n\n\n\nuse theme_xx() function series to change background of the plot. Find your favorite one.\n\n\n\n\n\n\n\ndark theme example."
  },
  {
    "objectID": "posts/Week2/index.html#discussion-goes-here",
    "href": "posts/Week2/index.html#discussion-goes-here",
    "title": "Week2: The growth of spike in winter wheat",
    "section": "Discussion goes here",
    "text": "Discussion goes here"
  },
  {
    "objectID": "posts/Week3/index.html#plot",
    "href": "posts/Week3/index.html#plot",
    "title": "Week3: Spikelet development",
    "section": "0.2 Plot",
    "text": "0.2 Plot\n\n0.2.1 GGplot2\nRequirements of scientific plot.\n\naxis title with unit if there is any.\nlegend title full name instead of default abbreviation.\n\nFigure title.\nggplot 2 ggplot gallery\n\nlibrary(ggplot)\nlibrary(ggplot2)\n\n\ndata %>% \n  ggplot(aes(x=date,y=weight,color=var))+\n  geom_point()+\n  geom_line(aes(group=group))+ # link the point by group.\n  xlab(\"date of harvest\")+ #x axis title\n  ylab(\"ear weight(g)\")+   #y axis title\n  guides(color=guide_legend(title=\"Cultivar\")) #change legend title \n\n\n\n\nFigure 1: Growth of ear weight over time.\n\n\n\n\n\n\n\n\n\n\nChallenge\n\n\n\nuse theme_xx() function series to change background of the plot. Find your favorite one.\n\n\n\n\n\n\n\ndark theme example."
  }
]