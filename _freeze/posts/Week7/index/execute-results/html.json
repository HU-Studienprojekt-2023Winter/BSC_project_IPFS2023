{
  "hash": "1f0face61297fcc00d51e9037dfa404e",
  "result": {
    "markdown": "---\ntitle: \"Week7: Grain development III\"\nauthor: \"Tien-Cheng\"\ndate: \"2023-05-30\"\ncategories: [R-intermediate]\n\ntoc-location: left\n# number-sections: true\nwebsite: \n  sidebar:\n    search: true\nformat:\n  html: \n    grid:\n      sidebar-width: 300px\n      body-width: 900px\n      margin-width: 300px\n      gutter-width: 1.5rem\n\nreference-location: margin\n---\n\n\n\n\nWelcome to the fifth course! You will learn more about `dataframe` wrangling:\n\n::: callout-note\n# Learning goals\n\n1.  data frame wrangling with `dplyr` and `tidyr`\n2.  `ggplot()`\n:::\n\n::: callout-warning\n## Discussion\n\n9.  What is `case_when()`? How to write the syntax?\n10. When to use `match()` and `order()`?\n:::\n\n### how to get the minimum unique combination of dataframe?\n\nhow many unique year-months combinations were included in \\`climate 2019 for early and late sowing?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate %>% \n  dplyr::filter(DFG_year==\"DFG2019\") %>% \n  group_by(y,m) %>% \n  summarise()\n\nclimate %>% \n  dplyr::filter(DFG_year==\"DFG2019\") %>% \n  dplyr::select(y,m) %>% \n  dplyr::distinct()\n```\n:::\n\n\n::: callout-warning\n## challenge\n\nCompare the growing seasons across three years.\n\n1.  check the datatype of `DayTime`, make sure it is `Date`.\n2.  `group_by`year and sowing date, `mutate` a new column called `DAS`(Days after sowing).\n3.  use `ggplot` to visualize this dataframe with points and lines:\n\nx is `DAS`, y is `Acc_Temperature`, color is `DFG_year` and the points should be linked of same `DFG_year` and `sowing_date`.\n\nIs there additional columns required?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n:::\n\n### wide to long\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate %>%names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"DayTime\"                \"y\"                      \"m\"                     \n [4] \"d\"                      \"DailyMean_Temperature\"  \"Acc_Temperature\"       \n [7] \"Acc_Percipitation\"      \"Acc_Radiation\"          \"DailySum_Percipitation\"\n[10] \"DailySum_Radiation\"     \"sowing_date\"            \"DFG_year\"              \n```\n:::\n\n```{.r .cell-code}\nclimate_long <- climate %>% \n  tidyr::pivot_longer(names_to = \"Daily_Terms\",\n                      values_to = \"Daily_value\",\n                      cols = contains(\"Daily\")) \nclimate_long%>% \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"DayTime\"           \"y\"                 \"m\"                \n [4] \"d\"                 \"Acc_Temperature\"   \"Acc_Percipitation\"\n [7] \"Acc_Radiation\"     \"sowing_date\"       \"DFG_year\"         \n[10] \"Daily_Terms\"       \"Daily_value\"      \n```\n:::\n\n```{.r .cell-code}\n#select cols by position\nclimate_long <- climate %>% \n  tidyr::pivot_longer(names_to = \"Terms\",\n                      values_to = \"value\",\n                      # select both patterns\n                      cols = grep(\"(Daily|Acc)\",names(.)))\n\ngrep(\"(Daily|Acc)\",names(climate))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\nclimate_long%>% \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"DayTime\"     \"y\"           \"m\"           \"d\"           \"sowing_date\"\n[6] \"DFG_year\"    \"Terms\"       \"value\"      \n```\n:::\n:::\n\n\n### long to wide\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate %>%names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"DayTime\"                \"y\"                      \"m\"                     \n [4] \"d\"                      \"DailyMean_Temperature\"  \"Acc_Temperature\"       \n [7] \"Acc_Percipitation\"      \"Acc_Radiation\"          \"DailySum_Percipitation\"\n[10] \"DailySum_Radiation\"     \"sowing_date\"            \"DFG_year\"              \n```\n:::\n\n```{.r .cell-code}\nclimate_long <- climate %>% \n  tidyr::pivot_longer(names_to = \"Daily_Terms\",\n                      values_to = \"Daily_value\",\n                      cols = contains(\"Daily\"))\nclimate_long%>% \n  tidyr::pivot_wider(names_from = \"Daily_Terms\",\n                     values_from = \"Daily_value\")%>% \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"DayTime\"                \"y\"                      \"m\"                     \n [4] \"d\"                      \"Acc_Temperature\"        \"Acc_Percipitation\"     \n [7] \"Acc_Radiation\"          \"sowing_date\"            \"DFG_year\"              \n[10] \"DailyMean_Temperature\"  \"DailySum_Percipitation\" \"DailySum_Radiation\"    \n```\n:::\n:::\n\n\n::: callout-warning\n## Discussion\n\n`wide` refers to one column one trait and `long` denotes the stacked traits in two columns (names and values).\n\n1.  From `select` and `filter` point of view, when is `wide` format useful and when is `long` ideal?\n\n2.  If you want to `mutate` a column based on calculation between multiple traits, e.g., trait1-trait2/trait3, then which formats is more suitable?\n:::\n\n<!-- ### Protocols of making a regression plot -->\n\n<!-- [![Click to read original article](Protocol.jpg)](https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/2041-210X.12577) -->\n\n## Looping with for(), lapply() and map()\n\ndeal repetitive tasks with loops.\\[\\^1\\] \\[\\^1\\]: [lapply vs for loop](https://nicercode.github.io/guides/repeating-things/) [lapply vs purrr](https://stackoverflow.com/questions/45101045/why-use-purrrmap-instead-of-lapply)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilename <- c('grain_counting_practice_studentName1.xlsx',\n              'grain_counting_practice_studentName2.xlsx')\nfile_list<- filename %>% strsplit(\"_\")\n# tradition way of for loop\nres <- c()\nfor(i in 1:2){\n  res <- c(res,file_list[[i]][4])\n}\n\n# alternative in r package purrr\n# chr stands for the \"character\" output.\npurrr::map_chr(1:length(file_list),  ~{\n  file_list[[.x]][4]\n})\n\n# notice that the output of map_chr must be 1 element per iteration.\npurrr::map_chr(filename,  ~{\n  .x %>% strsplit(\"_\") %>% unlist()\n})\n\n# equivalent\npurrr::map(filename,  ~{\n  .x %>% strsplit(\"_\") %>% unlist()\n})\n\nlapply(filename,function(x){\n  x %>% strsplit(\"_\") %>% unlist()\n})\n```\n:::\n\n\n### read your own data\n\nGo to [HU-box](https://box.hu-berlin.de/d/fc7db144021a4a35a086/), download the `student` folder.\n\n::: callout-note\n## challenge\n\nusing for loop, extract the student name from file name. 1. list the files of the folder `student` using `list.files()` 2. write your own for loop.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n$clement\n[1] \"Var\"          \"Plot_Id\"      \"Spikes\"       \"flower\"       \"kernal.full\" \n[6] \"Kernal.half\"  \"kernal.small\"\n\n$hanwenhsu\n[1] \"var\"          \"plot_id\"      \"spike\"        \"flower\"       \"kernel.full\" \n[6] \"kernel.half\"  \"kernel.small\"\n\n$shawon\n[1] \"var\"         \"plot.id\"     \"spike\"       \"flower\"      \"kernel.full\"\n[6] \"kernel.half\" \"NA.\"        \n```\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n## challenge\n\nUsing `map_dfr()`, read the three files in the folder.\n\n1.  list the files of the folder `student` using `list.files()`\n2.  find which function could read `.xlsx`\n3.  read each `.xlsx` as one list element\n4.  add a column containing student name information\n5.  use for loop to return the column names of three dataframes.\n6.  visualize it with ggplot:\n\n6.1. do data summary for each file, compare the range of three files.\n\n6.2. Visualize it with ggplot, differentiate the data from each student by `color`.\n:::\n\n## Spikelet position practice\n\n### read real data\n\nread kernel_combine.csv in folder data using relative path. subset column `tiller` which match pattern `M`.\n\nHow can you get the unique combination of `car`,`var`,`nitrogen` and `time`? Which combinations of functions can you use?\n\n::: {.callout-note collapse=\"true\"}\n## answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  group_by(car,var,nitrogen,time) %>% \n  summarise()\n```\n:::\n\n:::\n\n### classify spikelet based on position\n\nthe spike of the main shoot was dissected to count the total number of floret in\n\n-   basal (third-fifth spikelet from the bottom)\n\n-   central (middle spikelets)\n\n-   apical (third-fifth spikelet from the top) spikelets throughout the spike [reference](https://doi.org/10.1016/j.fcr.2020.107908)\n\n\n::: {.cell}\n\n:::\n\n\n### basic summary of kernel development summ for single spike\n\n-   Sp: total spikelet\n-   Fl: maximum floret\n-   sfl: total floret\n-   kf: total full kernel\n-   kh: total half kernel\n-   ks: total small kernel\n-   kp: potential kernel number\n-   fr: filling rate\n-   fc: potential filling rate\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 681\nColumns: 15\nGroups: nitrogen, time, var, rep, tiller [227]\n$ nitrogen <chr> \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"~\n$ time     <chr> \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"~\n$ var      <chr> \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\"~\n$ rep      <int> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 1, 1, 1, 2, 2, 2~\n$ tiller   <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"~\n$ type     <chr> \"apical\", \"basal\", \"central\", \"apical\", \"basal\", \"central\", \"~\n$ Sp       <int> 16, 6, 11, 19, 7, 13, 17, 6, 11, 19, 7, 13, 19, 7, 13, 16, 6,~\n$ Fl       <int> 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4~\n$ sfl      <int> 19, 18, 20, 21, 21, 24, 22, 20, 20, 21, 22, 24, 18, 21, 24, 1~\n$ kf       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ kh       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~\n$ ks       <int> 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0~\n$ kp       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ fr       <dbl> 0.5263158, 0.4444444, 0.6500000, 0.6666667, 0.5238095, 0.7500~\n$ fc       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~\n```\n:::\n:::\n\n\n### Data wrangling and plot with facet\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## recommendation\n\n[purrr](https://www.rebeccabarter.com/blog/2019-08-19_purrr)\n",
    "supporting": [
      "index_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}