{
  "hash": "db9a37f031536e6add2c9f0b435a38d6",
  "result": {
    "markdown": "---\ntitle: \"Week4: Grain development\"\nauthor: \"Tien-Cheng\"\ndate: \"2023-05-09\"\ncategories: [R-basic]\n\ntoc-location: left\nnumber-sections: true\nwebsite: \n  sidebar:\n    search: true\nformat:\n  # ipynb: default\n  html: \n    grid:\n      sidebar-width: 300px\n      body-width: 900px\n      margin-width: 300px\n      gutter-width: 1.5rem\n\nreference-location: margin\n---\n\n\n\n\nWelcome to the third course! You will learn `ggplot` and `dataframe` wrangling:\n\n::: callout-note\n# Learning goals\n\n1.  data frame wrangling with `dplyr` and `tidyr`\n2.  `ggplot2`\n3.  for loop\n:::\n\n## more mutate examples\nCreate dataframe\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- expand.grid(x=letters[1:4],\n                  y=1:2)\n```\n:::\n\n### combine columns\n`paste`, `interaction` , `unite`\nCompare the results\n\n::: {.cell}\n\n```{.r .cell-code}\ndf%>% mutate(paste(x,y))\ndf%>% mutate(z=paste(x,y))\ndf%>% mutate(z=paste(x,y,sep = \"-\"))\ndf %>% tidyr::unite(data = .,col = \"z\",c(x,y))\ndf <- df %>% mutate(z=interaction(x,y))\n```\n:::\n\n### add columns\n\n::: {.cell}\n\n```{.r .cell-code}\n# add identifier based on row numbers\ndf %>% mutate(id=1:n())\ndf %>% mutate(id=1:nrow(.))\n# row names\nrownames(df)\ndf %>% filter()\nrownames(df) <- LETTERS[1:nrow(df)]\nrownames(df)\n```\n:::\n\n::: {.callout-warning}\n## practice\nsubset the row where \n(x equals to \"a\", y equals to 1) or (x equals to c, y equals to 2)\n1. How many ways to achieve this?\n2. Observe the row names, are they the same before and after subseting?\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  x y\n1 a 1\n2 c 2\n```\n:::\n:::\n\n:::\n\n### replace column \nreplace one column based on single condition\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% mutate(k=ifelse(x==\"a\",\"A\",\"B\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x y k\n1 a 1 A\n2 b 1 B\n3 c 1 B\n4 d 1 B\n5 a 2 A\n6 b 2 B\n7 c 2 B\n8 d 2 B\n```\n:::\n\n```{.r .cell-code}\ndf %>% mutate(k=ifelse(y==1,\"A\",\"B\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x y k\n1 a 1 A\n2 b 1 A\n3 c 1 A\n4 d 1 A\n5 a 2 B\n6 b 2 B\n7 c 2 B\n8 d 2 B\n```\n:::\n\n```{.r .cell-code}\ndf %>% mutate(k=case_when(x==\"a\"~\"A\",\n                          TRUE~\"B\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x y k\n1 a 1 A\n2 b 1 B\n3 c 1 B\n4 d 1 B\n5 a 2 A\n6 b 2 B\n7 c 2 B\n8 d 2 B\n```\n:::\n:::\n\nreplace cases\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% mutate(k=case_when(x==\"a\"~\"A\",\n                          x==\"b\"~\"B\",\n                          TRUE~\"C\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x y k\n1 a 1 A\n2 b 1 B\n3 c 1 C\n4 d 1 C\n5 a 2 A\n6 b 2 B\n7 c 2 C\n8 d 2 C\n```\n:::\n:::\n\ntoo many cases\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlook_table <- data.frame(x=letters,\n                         X=LETTERS)\ndf %>% merge(look_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x y X\n1 a 1 A\n2 a 2 A\n3 b 1 B\n4 b 2 B\n5 c 1 C\n6 c 2 C\n7 d 1 D\n8 d 2 D\n```\n:::\n:::\n\n::: {.callout-warning}\n## practice\n`merge` is not actually replace the orignal column.\nwrite a function to replace `letters` with `LETTERS`\ninput is a vector of lower case vector `vec <- c(\"c\",\"a\",\"b\",\"d\")`,\noutput will be the matched upper case vector `c(\"C\",\"A\",\"B\",\"D\")`\n::: \n\n### advanced mutate add-on :across \napply function for multiple columns\n\nacross( `column_name` or `column_position`,FUNCTION)\n\nFUNCTION examples\n\n1. `function(x){x +1}`\n\n   syntax: `~{.x+1}`\n   \n2. `function(x){mean(x, ...)}`\n\n   syntax: `~{mean(.x,...)}` \n\n`...` means the additional option other than the first input argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate %>% \n  select(ends_with(\"Temperature\")) %>% \n  head(.,3) %>%\n  glimpse()\n\nclimate %>% \n  mutate(across(where(is.numeric),~{round(.x, digits = 2)})) %>%\n  # mutate(across(where(is.numeric),function(x){round(x, digits = 2)})) %>%\n  select(ends_with(\"Temperature\")) %>% \n  head(.,3) %>% \n  glimpse()\n```\n:::\n\n## Conclude your dataframe by groups\n![](wrangling.png)\n\n### group_by \nLearn from [examples](https://dplyr.tidyverse.org/reference/group_by.html)!\n\n::: {.callout-warning}\n## practice\n\n1. read `climate.csv` from `data` folder using relative path\n2. find the sowing date (i.e., the first date) for each year (`DFG_year`) and each sowing treatment(`sowing_date`).\n3. calculate thermal time based on `DailyMean_Temperature`\n:::\n\n### how to get the minimum unique combination of dataframe?\nhow many unique year-months combinations were included in `climate 2019 for early and late sowing?\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate %>% \n  dplyr::filter(DFG_year==\"DFG2019\") %>% \n  group_by(y,m) %>% \n  summarise()\n\nclimate %>% \n  dplyr::filter(DFG_year==\"DFG2019\") %>% \n  dplyr::select(y,m) %>% \n  dplyr::distinct()\n```\n:::\n\n### wide to long\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate %>%names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"DayTime\"                \"y\"                      \"m\"                     \n [4] \"d\"                      \"DailyMean_Temperature\"  \"Acc_Temperature\"       \n [7] \"Acc_Percipitation\"      \"Acc_Radiation\"          \"DailySum_Percipitation\"\n[10] \"DailySum_Radiation\"     \"sowing_date\"            \"DFG_year\"              \n```\n:::\n\n```{.r .cell-code}\nclimate_long <- climate %>% \n  tidyr::pivot_longer(names_to = \"Daily_Terms\",\n                      values_to = \"Daily_value\",\n                      cols = contains(\"Daily\")) \nclimate_long%>% \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"DayTime\"           \"y\"                 \"m\"                \n [4] \"d\"                 \"Acc_Temperature\"   \"Acc_Percipitation\"\n [7] \"Acc_Radiation\"     \"sowing_date\"       \"DFG_year\"         \n[10] \"Daily_Terms\"       \"Daily_value\"      \n```\n:::\n:::\n\n### long to wide\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate %>%names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"DayTime\"                \"y\"                      \"m\"                     \n [4] \"d\"                      \"DailyMean_Temperature\"  \"Acc_Temperature\"       \n [7] \"Acc_Percipitation\"      \"Acc_Radiation\"          \"DailySum_Percipitation\"\n[10] \"DailySum_Radiation\"     \"sowing_date\"            \"DFG_year\"              \n```\n:::\n\n```{.r .cell-code}\nclimate_long <- climate %>% \n  tidyr::pivot_longer(names_to = \"Daily_Terms\",\n                      values_to = \"Daily_value\",\n                      cols = contains(\"Daily\"))\nclimate_long%>% \n  tidyr::pivot_wider(names_from = \"Daily_Terms\",\n                     values_from = \"Daily_value\")%>% \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"DayTime\"                \"y\"                      \"m\"                     \n [4] \"d\"                      \"Acc_Temperature\"        \"Acc_Percipitation\"     \n [7] \"Acc_Radiation\"          \"sowing_date\"            \"DFG_year\"              \n[10] \"DailyMean_Temperature\"  \"DailySum_Percipitation\" \"DailySum_Radiation\"    \n```\n:::\n:::\n\n\n<!-- ### Protocols of making a regression plot -->\n<!-- [![Click to read original article](Protocol.jpg)](https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/2041-210X.12577) -->\n\n## Spikelet position practice\nread kernel_combine.csv in folder data using relative path.\nsubset column `tiller` which match pattern `M`.\n\nHow can you get the unique combination of `car`,`var`,`nitrogen` and `time`? Which combinations of functions can you use?\n\n::: {.callout-note collapse=\"true\"}\n## challenge\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 48 x 4\n# Groups:   car, var, nitrogen [48]\n     car var       nitrogen time \n   <int> <chr>     <chr>    <chr>\n 1     1 Alves     n3       t1   \n 2     1 Apertus   n3       t1   \n 3     1 Esket     n3       t1   \n 4     1 Pioneer   n3       t1   \n 5     1 Potential n3       t1   \n 6     1 Torrid    n3       t1   \n 7     2 Alves     n4       t1   \n 8     2 Apertus   n4       t1   \n 9     2 Esket     n4       t1   \n10     2 Pioneer   n4       t1   \n# i 38 more rows\n```\n:::\n:::\n\n:::\n### classify spikelet based on position\n\nthe spike of the main shoot was dissected to count the total number of floret in\n\n-   basal (third-fifth spikelet from the bottom)\n\n-   central (middle spikelets)\n\n-   apical (third-fifth spikelet from the top) spikelets throughout the spike [reference](https://doi.org/10.1016/j.fcr.2020.107908)\n\n\n::: {.cell}\n\n:::\n\n### basic summary of kernel development summ for single spike\n\n* Sp: total spikelet\n* Fl: maximum floret \n* sfl: total floret\n* kf: total full kernel\n* kh: total half kernel\n* ks: total small kernel\n* kp: potential kernel number \n* fr: filling rate \n* fc: potential filling rate\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 681\nColumns: 15\nGroups: nitrogen, time, var, rep, tiller [227]\n$ nitrogen <chr> \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"~\n$ time     <chr> \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"~\n$ var      <chr> \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\"~\n$ rep      <int> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 1, 1, 1, 2, 2, 2~\n$ tiller   <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"~\n$ type     <chr> \"apical\", \"basal\", \"central\", \"apical\", \"basal\", \"central\", \"~\n$ Sp       <int> 16, 6, 11, 19, 7, 13, 17, 6, 11, 19, 7, 13, 19, 7, 13, 16, 6,~\n$ Fl       <int> 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4~\n$ sfl      <int> 19, 18, 20, 21, 21, 24, 22, 20, 20, 21, 22, 24, 18, 21, 24, 1~\n$ kf       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ kh       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~\n$ ks       <int> 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0~\n$ kp       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ fr       <dbl> 0.5263158, 0.4444444, 0.6500000, 0.6666667, 0.5238095, 0.7500~\n$ fc       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~\n```\n:::\n:::\n\n\n### Data wrangling and plot with facet\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}