{
  "hash": "007e5105b62eb68b0fc5b1fe11d72410",
  "result": {
    "markdown": "---\ntitle: \"Week1: The growth of spike in winter wheat\"\nauthor: \"Tien-Cheng\"\ndate: \"2023-04-17\"\ncategories: [R-basic]\nimage: \"growth.png\"\ntoc: true\nnumber-sections: true\nformat:\n  html: \n    html-math-method: katex\n---\n\n\nWelcome to the first course! During the following 2 hrs, you will learn:\n\n::: callout-note\n1.  install and use r libraries\n2.  relative path\n3.  data type\n4.  functions\n:::\n\nPlease make sure you have installed [`R & Rstudio`](https://posit.co/download/rstudio-desktop/).\n\nThen download the data from [HU-box](https://box.hu-berlin.de/smart-link/891660cb-750c-4312-bd34-e5748a76705a/).\n\nOpen `Ear_development_BSC_project.Rproj`, go to `file`, open `Week1.R`\n\n## Working directory\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n# read.csv()# try to read one file\n```\n:::\n\n\n## Concept of datatype & case sensitive\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariable\n# assignment str\"v\" to name \"variable\"\n## \"\" and unquote str and variable \n\nvariable <- \"v\"\nVariable <- 1\nvariable +1\nVariable +1 \n```\n:::\n\n\n## Check data type\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# str??\nstr\n?str\nstr(variable)\nstr(Variable)\n# data type coersion\nstr(NA)\nstr(c(NA,1))\nstr(c(NA,\"a\"))\nstr(c(NA,TRUE))\nstr(c(1,\"a\"))\n```\n:::\n\n\n## Function: something with `()`\nformat: `function_name`(`argument1`, `argument2`) {`code`}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# how many ways of creating sequence?\nc(1,2,3)\nseq(1,3,1)\n\n# embeded function fun2(fun1())\nlength(c(1,2,3))\n# use pipe, . is the result of previous step\nc(1,2,3) %>% length(.)\n\n# what is the data type?\nstr(c(1,2,3))\n\n# replicate\nrep(1,3)\nrep(1,3) %>% unique()\nrep(1,3) %>% cumsum()\n\npaste(c(\"a\",\"1\"),collapse = \"\")\npaste0(c(\"a\",\"1\"))\n```\n:::\n\n\n::: callout-challenge\nhow to use `paste`and `rep`to create sequence of `char` vector c(\"a1\",\"b1\",\"a2\",\"b2\")? \n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a1\" \"a2\" \"b1\" \"b2\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a1\" \"b1\" \"a2\" \"b2\"\n```\n:::\n:::\n\n## Date\n\n::: {.cell}\n\n:::\n\n::: callout-challenge\nif `Date` is additive, how to create successive `Date` vector? Date start with \"2023-04-17\"\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-04-17\" \"2023-04-18\" \"2023-04-19\" \"2023-04-20\" \"2023-04-21\"\n```\n:::\n:::\n\n\n\n\n## write your first function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplusone <- function(x){x+1}\n# is function data type sensitive?\nplusone(variable)\nplusone(Variable)\n```\n:::\n\n\n::: callout-challenge\nwrite a average function and check whether input is numeric if not return with warning \\*first write your function in text\n:::\n\n## pattern matching: logical vector and its position \n\n::: {.cell}\n\n```{.r .cell-code}\n3%in%c(1,3) \n2%in%c(1,3) \n1==2 \n!1==2 \n1!=2 \n\nwhich(c(1,3)==3) \n# what will be the difference\norder(c(3,1,2)) \nc(3,1,2) %>% .[order(.)]\n\n# what will be the data type?\nc(1,2,NA) %>% is.na() \nc(1,2,NA) %>% is.na() %>% which() \nc(1,2,NA) %>% is.na() %>% !.\nc(1,2,NA) %>% !is.na() \n!is.na(c(1,2,NA))\n```\n:::\n\n\n## Indexing something with `[]` or `$`\n\n::: {.cell}\n\n```{.r .cell-code}\n# why this will not work?\ndata.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1),\n           temp=c(20,15,13), \n           thermal_time=cumsum(temp))\ndf\n```\n:::\n\n::: callout-challenge\ncreate data frame to calculate thermal time \n::: \n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n        time temp thermal_time\n1 2023-04-17   20           20\n2 2023-04-18   15           35\n3 2023-04-19   13           48\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# which is of type dataframe?\ndf$temp %>% str()\ndf[\"temp\"] %>% str()\ndf[,\"temp\"] %>% str()\ndf[[\"temp\"]] %>% str()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}