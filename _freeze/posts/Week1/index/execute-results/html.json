{
  "hash": "e23c62f5ae3ff8ec8a64c62e10594a0b",
  "result": {
    "markdown": "---\ntitle: \"Week1: The growth of spike in winter wheat\"\nauthor: \"Tien-Cheng\"\ndate: \"2023-04-18\"\ncategories: [R-basic]\nimage: \"growth.png\"\ntoc: true\nwebsite: \n  sidebar:\n    search: true\n\nformat:\n  html: \n    html-math-method: katex\n---\n\n\n# Phenology and the growth of spike\n\nWelcome to the first course! During the following 2 hrs, you will learn:\n\n::: callout-note\n1.  data type\n2.  functions\n3.  install and use r libraries\n4.  relative path\n:::\n\nPlease make sure you have installed [`R & Rstudio`](https://posit.co/download/rstudio-desktop/).\n\nDownload the folder from [HU-box](https://box.hu-berlin.de/d/fc7db144021a4a35a086/).\n\nOpen `Ear_development_BSC_project.Rproj`\n\n## R basic\n\nPress `Ctrl+ Shift +N`to open new script.Save it as `Week1_practice.R` Copy code from this website to your script and press `run`.\n\nSave \\### Concept of datatype & case sensitive Rules:\n\n1.  Don't compete your `variable names` with system. (eg., `var`,`mean`,`aov`)\n\n*something that will show in the drop down menu of auto-completion.*\n\n2.  Don't start with number.\n3.  Separate long name with `_`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariable\n# assignment str\"v\" to name \"variable\"\n## \"\" and unquote str and variable \n\nvariable <- \"v\"\nVariable <- 1\nvariable +1\nVariable +1 \n```\n:::\n\n\n### Check data type\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# str??\nstr\n?str\nstr(variable)\nstr(Variable)\n# data type coersion\nstr(NA)\nstr(c(NA,1))\nstr(c(NA,\"a\"))\nstr(c(NA,TRUE))\nstr(c(1,\"a\"))\n```\n:::\n\n\n### r packages\n\nCheck this great package [tidyverse](https://dplyr.tidyverse.org/)!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(tidyrverse)\ninstall.packages(\"tidyrverse\")\nlibrary(dplyr)\n```\n:::\n\n\n### Function: something with `()`\n\nPlease use `%>%` (pipe) to avoid embedded functions. `.`stands for the result from the left side of the pipe.\n\nFor long line code, press `enter` after each `%>%`, sort them by `ctrl A`+ `ctrl I`. Pipe is available in r-package either `dplyr` or `magrittr`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# syntax of using pipe\n\nfun1(object)\n\nobject %>% fun1(.)\nobject %>% fun1()\nobject %>% fun1() %>% .\nobject %>% fun1(.) %>% .\n\n#embedded functions\nfun2(fun1(object))\n# pipe\nobject %>% \n  fun1() %>% \n  fun2()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# how many ways of creating a sequence?\nc(1,2,3)\nseq(1,3,1)\n\n# embedded function : fun2(fun1())\nlength(c(1,2,3))\n# use pipe, \".\" is the result of previous step\nc(1,2,3) %>% length(.)\n\n# replicate element as vector\nrep(1,3)\n# remove duplicates\nrep(1,3) %>% unique()\n# cumulative sum \nrep(1,3) %>% cumsum()\n\n# is there any difference?\npaste(c(\"a\",\"1\"),collapse = \"\")\npaste0(c(\"a\",\"1\"))\npaste0(\"a\",\"1\")\n```\n:::\n\n\n::: callout-challenge\nUse `str()` to check the data type of above line.\n\nYou have two vectors, `c(\"a\",\"b\")` and `c(\"1\",\"2\")` How to use `paste`and `rep`to create sequence of `char` vector shown below? Try to use `%>%` in this task.\n\ncheck the arguments of `rep` to get more hints. e.g., rep(c(\"a\",\"b\"),each=2) rep(c(\"a\",\"b\"),times=2)\n:::\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a1\" \"a2\" \"b1\" \"b2\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a1\" \"b1\" \"a2\" \"b2\"\n```\n:::\n:::\n\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"Illustratien/BSC_project_IPFS2023\"\n        data-repo-id=\"R_kgDOJXRJ5Q\"\n        data-category=\"Q&A\"\n        data-category-id=\"DIC_kwDOJXRJ5c4CV5K2\"\n        data-mapping=\"og:title\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"en\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n### write your first function\n\nformat: `function_name`(`argument1`, `argument2`) {`code`} example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplusone <- function(x){x+1}\n# is function data type sensitive?\nplusone(variable)\nplusone(Variable) \n```\n:::\n\n\nfunction with documentation example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_name  <-function(input){\n  input: datatype, length, meaning.\n  output: datatype, length, meaning.\n  action1: intermediate_variable <- input %>% fun1()\n  action2: output <-intermediate_variable%>% fun2()\n  ...\n  return(output)\n}\n```\n:::\n\n\n::: callout-challenge\nwrite a function with documentation: input `vec` is a numeric vector with length 3, return `str` of average value of `vec` Â± standard deviation of `vec`. \\*first write your function in text\n:::\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"Illustratien/BSC_project_IPFS2023\"\n        data-repo-id=\"R_kgDOJXRJ5Q\"\n        data-category=\"Q&A\"\n        data-category-id=\"DIC_kwDOJXRJ5c4CV5K2\"\n        data-mapping=\"og:title\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"bottom\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"en\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n### Date\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.Date(\"2023-04-17\")\nas.Date(\"2023-04-17\",format=\"%Y-%m-%d\")\nas.Date(\"20230417\")\nas.Date(\"17042023\")\nas.Date(\"2023-04-17\")-7\n```\n:::\n\n\n::: callout-challenge\nif `Date` is additive, how to create successive `date` vector of length 5? Vector `date` start with \"2023-04-17\" Could you do the average of this vector?\n:::\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-04-17\" \"2023-04-18\" \"2023-04-19\" \"2023-04-20\" \"2023-04-21\"\n```\n:::\n:::\n\n\n### Pattern matching: logical vector and its position\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# check if pattern exist in vector\n3%in%c(1,3) \n2%in%c(1,3) \n\n1==2 \n!1==2 \n1!=2 \nc(1,3)==2\n\nwhich(c(1,3)==3) \n\n# what will be the difference?\norder(c(3,1,2)) \nc(3,1,2) %>% .[order(.)]\n\n# what will be the data type? check with str()\nc(1,2,NA) %>% is.na() \nc(1,2,NA) %>% is.na() %>% which() \nc(1,2,NA) %>% is.na() %>% !.\nc(1,2,NA) %>% !is.na() \n!is.na(c(1,2,NA))\n\n# check if data type match\narg <- \"\"\nis.character(arg)\nif(is.character(arg)){\n  print(\"character\")\n}\n\nif(is.character(arg)){\n  print(\"character\")\n}else{\n  error(\"type other than character\")\n}\n\nif(is.character(arg)){\n  warning(\"wrong\")\n}\n\nif(is.character(arg)){\n  stop(\"wrong\")\n}\n```\n:::\n\n\n::: callout-challenge\nwrite a average function and check whether input is numeric if not return with `stop()` \\*first write your function in text\n:::\n\nThe end of week1.\n\n### Indexing something with `[]` or `$`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# why these will not work?\ndata.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1),\n           temp=c(20,15,13), \n           thermal_time=cumsum(temp))\ndf\n```\n:::\n\n\nWhy these work?\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n        time temp thermal_time\n1 2023-04-17   20           20\n2 2023-04-18   15           35\n3 2023-04-19   13           48\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# which is of type dataframe?\nthermaltime_df$temp %>% str()\nthermaltime_df[\"temp\"] %>% str()\nthermaltime_df[,\"temp\"] %>% str()\nthermaltime_df[[\"temp\"]] %>% str()\n```\n:::\n\n\n::: callout-challenge\nuse `thermaltime_df`, 1. Access column `thermal_time` as `vector` 2. Extract `temp` when `time` is `2023-04-17`\n:::\n\n##Plot go to `file`, `src`, then open Week1.R\n\n###Working directory relative path terminology:\n\n`\".\"` means the same directory as script.\n\n`\"..\"` means the parent directory of `\".\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C:/Users/marse/seadrive_root/Tien-Che/My Libraries/PhD_Tien/Project/Postdoc_teaching/BSC_project_IPFS2023/posts/Week1\"\n```\n:::\n\n```{.r .cell-code}\ndata <- read.csv(\"../data/ear_summarized.csv\")\ndata %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 2,112\nColumns: 9\n$ date     <chr> \"2021-06-14\", \"2021-06-14\", \"2021-06-14\", \"2021-06-14\", \"2021~\n$ var      <chr> \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\"~\n$ nitrogen <int> 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 2~\n$ appl     <chr> \"Combined\", \"Combined\", \"Combined\", \"Combined\", \"Combined\", \"~\n$ timeid   <chr> \"Early\", \"Early\", \"Early\", \"Late\", \"Late\", \"Late\", \"Early\", \"~\n$ weight   <dbl> 0.4766667, 0.4766667, 0.4766667, 0.4816667, 0.4816667, 0.4816~\n$ TT       <dbl> 1679.354, 1679.354, 1679.354, 1506.496, 1506.496, 1506.496, 1~\n$ BBCH     <dbl> 63.77313, 63.77313, 63.77313, 62.72181, 62.72181, 62.72181, 6~\n$ group    <chr> \"Alves.Combined.Early.176\", \"Alves.Combined.Early.176\", \"Alve~\n```\n:::\n:::\n\n\n### GGplot2\n\nRequirements of scientific plot. 1. `axis title` with unit if there is any.\n\n2.  `legend title` full name instead of default abbreviation.\n\nFigure title.\n\n[ggplot 2](https://ggplot2.tidyverse.org) [ggplot gallery](https://r-graph-gallery.com)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot)\nlibrary(ggplot2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% \nggplot(aes(x=date,y=weight,color=var))+\ngeom_point()+\ngeom_line(aes(group=group))+ # link the point by group.\nxlab(\"date of harvest\")+ #x axis title\nylab(\"ear weight(g)\")+   #y axis title\nguides(color=guide_legend(title=\"Cultivar\")) #change legend title \n```\n\n::: {.cell-output-display}\n![Growth of ear weight over time.](index_files/figure-html/fig-growth-1.png){#fig-growth width=1152}\n:::\n:::\n\n\n::: callout-challenge\nuse `theme_xx()` function series to change background of the plot. Find your favorite one.\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n![dark theme example.](index_files/figure-html/unnamed-chunk-35-1.png){width=1152}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}