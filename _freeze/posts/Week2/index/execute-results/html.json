{
  "hash": "dbecdeb1291934cb3ec9e521d2c5cb2e",
  "result": {
    "markdown": "---\ntitle: \"Week2: The growth of spike in winter wheat\"\nauthor: \"Tien-Cheng\"\ndate: \"2023-04-25\"\ncategories: [R-basic]\nimage: \"growth.png\"\ntoc: true\nwebsite: \n  sidebar:\n    search: true\n\nformat:\n  html: \n    html-math-method: katex\n---\n\n\n\n\n# Phenology and the growth of spike\n\nWelcome to the second course! Last week, we have learned the data type of [`vectors`](https://towardsdatascience.com/learning-r-data-types-e698d23f8179#:~:text=First%2C%20R%20doesn%27t%20have,in%20R%20language%20is%20vector.), `function` and `%>%`.\n\nDuring the following 2 hrs, you will learn:\n\n::: callout-note\n1.  What is working directory (wd)?\n2.  How to subset elements from `vector`, `list` and `dataframe`\n3.  Plot with `ggplot`\n:::\n\nIf you haven't download the data, please go to [HU-box](https://box.hu-berlin.de/d/fc7db144021a4a35a086/).\n\nOpen `Ear_development_BSC_project.Rproj`\n\ncreate Week2.R and save it in folder `src`.\n\n## What is working directory (wd)?\n\n### abbreviation path: \".\" for wd and \"..\" for parent of wd\n\n\n`\".\"` means the working directory (wd) where this R script exists.\n\n`\"..\"` means the parent (one level higher) directory of `\".\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n# working directory, abbreviated as \".\"\ngetwd()\n# parent directory, abbreviated as \"..\"\ndirname(getwd())\n# assign current path to variable\ncurrent_path <- getwd()\n# check the type \ncurrent_path %>% str()\n\n\n# check files in the directory\n\n# are they different?\n\".\" %>% list.files(path=.)\ngetwd() %>% list.files(path=.)\n\n# are they different?\n\"..\" %>% list.files(path=.)\ngetwd() %>% dirname() %>% list.files(path=.)\n```\n:::\n\n\n::: callout-challenge\nAlthough the meaning of `.` is the same as `getwd()`,\nthe content is depending on the environment you are working with.\n\nRight click R studio logo, open a new R studio window,\ncompare the result of `getwd()` in R project and R\n:::\n\n### accessing files and folder inside a R project \nWhich one do you prefer? Why do we prefer relative path?\n\n::: {.cell}\n\n```{.r .cell-code}\n# absolute path, did you get error?\n\"C:/Users/marse/seadrive_root/Tien-Che/My Libraries/PhD_Tien/Project/Postdoc_teaching/BSC_project_IPFS2023/data\" %>% list.files(path=.)\n# relative path in R base\nparent_path <- getwd() \npaste0(parent_path,\"/data\") %>% list.files(path=.)\n\n# R project relative path, are they different? \n\".\\data\" %>% list.files(path=.)\n\"data\" %>% list.files(path=.)\n```\n:::\n\n::: callout-challenge\nread from relative path, which one is correct?\nAssume working directory `current_path` is `\"C/users/BSC_project/src\"`\n\n`Absolute_path = current_path +\"/\"+relative_path`\nBelow are four relative paths.\nPlease rewrite them in absolute (full) path form. What should `.` be replace? \nWhich two are the same?\n\n1. `\"ear_summarized.csv\"`\n\n2. `\"data/ear_summarized.csv\"`\n\n3. `\"./data/ear_summarized.csv\"`\n\n4. `\"../data/ear_summarized.csv\"`\n\n:::\n::: callout-challenge\ngo to folder data,\nuse relative path and try to read file `phenology.csv`,\nuse pipe,\nand assign the result to variable named `phenology`\n\n:::\n## subsetting element from vetor with `accessors []`\n\nvector indexing start from 1 to the length of the vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nempty_vec <- c()\nlength(empty_vec)\n# what is the type of the empty vec?\nempty_vec %>% str()\n\n# NULL: empty \nempty_vec[1]\nempty_vec[0]\n\n\nvec <- c(1,3,5)\nvec[1]\n#reorder the vector \nvec[c(2,1,3)]\n# removing the indexed elements\nvec[-1]\nvec[-2]\n\n# indexing start from 1, not 0\n# therefore you get, numeric(0)\nvec[0]\n# when access exceeding the range of a vector, what datatype do you get? \nvec[4]\nvec %>% .[length(.)+1]\nvec[1:4]\nvec[4:1]\n\n# find specific element or position\nvec[c(F,T,F)]\nvec[vec==5]\n# when codition not match at all, it will return? \nvec[vec==2]\nvec[c(F,F,F)]\nvec %>% .[c(F)]\nvec[vec==\"a\"]\n\n\n# default str vector\nletters\nLETTERS\n# when the query does not match, guess what will be the datatype? \nletters %>% .[.==2]\nletters %>% .[c(F)]\n# vector over write\nvec\nvec <- c(2,1,3)\nvec\n```\n:::\n\n\n::: callout-challenge\n\n::: {.cell}\n\n```{.r .cell-code}\nvec <- c(1, 2, 3, 4, 5)\nlogical_vec <- c(TRUE, FALSE)\nsubset_vec <- vec[logical_vec]\nsubset_vec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 5\n```\n:::\n:::\n\nwhat did you observe? Is there any [vector recycling](https://rpubs.com/vipero7/vector-recycling-in-r)?\n\nWhat happen when you enter `vec[TRUE]`?\n\n:::\nSupplementary information of special datatypes:\n\nEmpty : [`NULL`](https://www.r-bloggers.com/2018/07/r-null-values-null-na-nan-inf/) \n\nIndexing at zero position:[`numeric(0)`](https://www.programmingr.com/r-error-messages/numeric0-error/)\n\n### list: keep the diversity of data type\n\nlist_object\\<- list(`element_name`=`value`)\n\nThere are 3 common accessors for `list`:\n\n`[]` access the list element \n\n`[[]]` access the content of a list element by position or name\n\n`$` access the content of a list element by name\nlist_object`$element_name` or list_object`[[element_name]]`\n\nMore about the [accessors](https://www.r-bloggers.com/2009/10/r-accessors-explained/)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a simple list\nlist(1)\n# create a simple list with name \"x\" for first element\nlist(x=1)\nlist(x=1)[\"x\"]\n# extract content\nlist(x=1)$\"x\"\nlist(x=1)[[1]]\nlist(x=1)[[\"x\"]]\n\n# extract with pipe\nlist(x=1) %>% .[[1]]\nlist(x=1) %>% .$\"x\"\n\n# long list\nlong_list_example <- list(1,c(1,2),\n                          T,c(T,T),\n                          \"str\",c(\"a\",\"b\"),\n                          list(1),\n                          mean,data.frame())\n# check structure of this list \n# list_complex_example %>% str()\n# list_complex_example %>% glimpse()\n# list_complex_example\n# first list \nlong_list_example[1]\n# content of first list\nlong_list_example[[1]]\n# first element of content of first list\nlong_list_example[[1]][1]\n```\n:::\n\n::: callout-challenge\ncan you guess what data type are these?\n  \n\n::: {.cell}\n\n```{.r .cell-code}\nlong_list_example[[1]][2]\nlong_list_example[1][1]\nlong_list_example[1][2]\nlong_list_example[2][2]\nlong_list_example[[2]][2]\n```\n:::\n\n:::\n\n### lapply: return as a list\nlapply(vector, function)\n?lapply\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# input is vector\nc(1,4) %>% \n  lapply(.,FUN=function(x){x+3})\n# input is list\nlist(2,4,c(1,4)) %>% \n  lapply(.,FUN=function(x){x+3})\n# input has differnt type\nlist(2,4,c(1,4),\"8\") %>% \n  lapply(.,FUN=function(x){x+3})\n```\n:::\n\n::: callout-challenge\nWhy you get error in the last line?\n:::\n\n\n### dataframe is a special type of list\neach column has one data type\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a dataframe \ndf <- data.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1),                 temp=c(20,15,13), \n                 thermal_time=cumsum(c(20,15,13)))\n# another way\ndf <- data.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1)) \ndf$temp=c(20,15,13)\ndf$thermal_time=cumsum(df$temp)\n\n# third method\nlibrary(dplyr)\ndf <- data.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1)) %>% \n  mutate(temp=c(20,15,13), \n         thermal_time=cumsum(temp))\ndf\n```\n:::\n\n::: callout-challenge\nIs it possible to create data frame with vectors of different length?\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(time=as.Date(\"2023-04-16\",format=\"%Y-%m-%d\")+seq(1,3,1),                 temp=c(20,13))\n```\n:::\n\n:::\n\n### extract columns from data frame\nYou can subset `dataframe` by indexing [`row`,`column`]\n\n`dataframe`[,`column`] select the whole role for selected columnn\n\n`dataframe`[`row`,] select the whole column of selected rows\n\nSelect multiple row or column by puting logical or numeric vector in the square bracket.\n\n\n::: {.cell}\n\n:::\n\n\n::: callout-challenge\nuse `df`, 1. Access column `thermal_time` as `vector` 2. Extract `temp` when `time` is `2023-04-17`\n:::\n\n::: callout-challenge\nif you want to turn a data frame (`df`) by 90 degree (\"transpose\"),\nwhich function can you use? \nCould you find the answer on google or chatGPT?\n\n:::\n\n### practice dataframe with real data\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.csv(\"data/ear_summarized.csv\")\n# data %>% str()\ndata %>% glimpse()\nnames(data)\n# extract column from dataframe\ndata$BBCH\ndata %>% unique()\n\n# summarize dataframe\nlapply(data, range)\n# turn as data frame\nlapply(data, range) %>% data.frame()\n\nsummary(data)\n```\n:::\n\n\n## Plot\n\n### GGplot2\n\nRequirements of scientific plot. \n\n1. `axis title` with unit if there is any.\n\n2.  `legend title` full name instead of default abbreviation.\n\nFigure title.\n\n[ggplot 2](https://ggplot2.tidyverse.org) [ggplot gallery](https://r-graph-gallery.com)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot)\nlibrary(ggplot2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% \n  ggplot(aes(x=date,y=weight,color=var))+\n  geom_point()+\n  geom_line(aes(group=group))+ # link the point by group.\n  xlab(\"date of harvest\")+ #x axis title\n  ylab(\"ear weight(g)\")+   #y axis title\n  guides(color=guide_legend(title=\"Cultivar\")) #change legend title \n```\n\n::: {.cell-output-display}\n![Growth of ear weight over time.](index_files/figure-html/fig-growth-1.png){#fig-growth width=1152}\n:::\n:::\n\n\n::: callout-challenge\nuse `theme_xx()` function series to change background of the plot. Find your favorite one.\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n![dark theme example.](index_files/figure-html/unnamed-chunk-14-1.png){width=1152}\n:::\n:::\n\n\n## Discussion goes here\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}