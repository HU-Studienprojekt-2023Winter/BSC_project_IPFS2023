{
  "hash": "a38a4fe08555add7451d8f976a3f6e82",
  "result": {
    "markdown": "---\ntitle: \"Week9: Grain development v\"\nauthor: \"Tien-Cheng\"\ndate: \"2023-06-13\"\ncategories: [R-intermediate]\nimage: \"poster_big.png\"\ntoc-location: left\nnumber-sections: true\nwebsite: \n  sidebar:\n    search: true\nformat:\n  html: \n    grid:\n      sidebar-width: 300px\n      body-width: 1200px\n      margin-width: 100px\n      gutter-width: 1.5rem\n\nreference-location: margin\n---\n\n\n\n\nWelcome to the eighth course! You will learn more about`data visualization`:\n\n::: callout-note\n# Learning goals\n\n1. Warm up for final presentation\n2. Data type based story telling\n3. `ggplot()`\n:::\n\n::: callout-warning\n## Discussion: Warm up for the final presentation!\n\n1.  How the shape of dataframe is linked to data visualization?\n2.  What is the component of for loop? how to examine the function body? Do you need `print()` to see the result?\n\n::: {.cell}\n\n```{.r .cell-code}\nrange_vector <- 1:10\nfor( i in range_vector){\n  i+3\n}\n```\n:::\n\n3. What is important when you want to combine the dataframes row-wise?\n4. What is the format (columns and data type of columns) of self-collected ear data? \n5. Which plot type could be suitable for visualization?\n6. What are the logic of visualization oriented analysis? Could you list the possible steps? \n7. What are essential elements for reproducible analysis? For example, you have a r script which read the files in the folder and plot a plot. \n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read.csv(\"example.csv\")\ndf %>% \n  ggplot() %>% \n  geom_point(aes(x=x,y=y))\n```\n:::\n\n:::\n\n::: callout-warning\n## Excercise: \n1. share your code on github and share it with others.\n:::\n\n## Story telling: Warm up for final Presentation\n\n![Figure1: Project Plan](Project.png)\n\n![Figure2: Story type](Story_type.png)\n\n![Figure3: Cycle of visualization](Cycle_of_visualization.png)\n\n[![Visualization based on data type: click picture for source](poster_big.png)](https://www.data-to-viz.com)\n\n[^1] [^2]\n\n[^1]: [Ten simple rules for better figures](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003833) \n[^2]:[How to Make Good Graphs and Figures for Scientific Papers](https://www.simplifiedsciencepublishing.com/resources/how-to-make-good-graphs-and-figures-for-scientific-papers)\n\n## Exercise with student's data\n\npractice with files from `data/student`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magrittr)\ndf<- map_dfr(list.files(\"../data/student\"),~{\n  \n  student_name <-  .x %>% strsplit(\"_\") %>% unlist() %>% \n    .[4] %>% sub(\".xlsx\",\"\",.)\n  \n  file<- xlsx::read.xlsx(paste0(\"../data/student/\",.x),sheetIndex = 1) %>%  \n    `colnames<-`(stringr::str_to_lower(names(.)))%>% \n    `colnames<-`(gsub(\"kernal\",\"kernel\",names(.))) %>% \n    `colnames<-`(gsub(\"spikes\",\"spike\",names(.)))%>%\n    `colnames<-`(gsub(\"plot.id\",\"plot_id\",names(.))) %>% \n    mutate(student=student_name)\n}) \ndf %<>% mutate(var=\"Capone\",plot_id=159) %>% \n  .[!grepl(\"na.\",names(.))]\ndf %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 57\nColumns: 8\n$ var          <chr> \"Capone\", \"Capone\", \"Capone\", \"Capone\", \"Capone\", \"Capone~\n$ plot_id      <dbl> 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 15~\n$ spike        <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17~\n$ flower       <dbl> 1, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, ~\n$ kernel.full  <dbl> 0, 2, 2, 2, 3, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 1, ~\n$ kernel.half  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ kernel.small <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ student      <chr> \"clement\", \"clement\", \"clement\", \"clement\", \"clement\", \"c~\n```\n:::\n:::\n\n\n### How to make it a bit more beautiful?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n# click for answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  group_by(student,spike) %>% \n  ggplot(aes(flower,spike,color=student))+\n  geom_point()+\n  geom_path(alpha=.5)+\n  facet_grid(~student)+\n  theme_classic()+\n  theme(strip.background = element_blank(),\n        panel.grid.major.x = element_line(),\n        legend.position = \"none\")\n```\n:::\n\n:::\n\n### How to place kernel-related traits in subplots?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n1.  `pivot_longer()`to collect kernel-related traits\n2.  `facet_grid()`\n\n::: {.callout-tip collapse=\"true\"}\n# click for answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  pivot_longer(starts_with(\"kernel\"),\n               values_to = \"kernel\",\n               names_to=\"kerneltype\") %>% \n  group_by(student,spike) %>% \n  ggplot(aes(kernel,spike,color=student))+\n  geom_point()+\n  geom_path()+\n  facet_grid(kerneltype~student)+\n  theme_classic()+\n  theme(strip.background = element_blank(),\n        panel.grid.major.x = element_line(),\n        legend.position = \"none\")\n```\n:::\n\n:::\n\n### classify spikelet based on position {#sec-classify}\n\nthe spike of the main shoot was dissected to count the total number of floret in\n\n::: {.callout-note appearance=\"simple\"}\n-   basal 1/3 spikelet from the bottom)\n\n-   central (middle 1/3 of spikelets)\n\n-   apical (1/3 spikelets from the top)\n\n[reference](https://doi.org/10.1016/j.fcr.2020.107908)\n:::\n\ntry to clssify each spike into three classes based on their position.\n\n::: {.callout-note appearance=\"simple\"}\n# challenge\n\n1.  add new column called `type` using `mutate()`\n2.  `cut()` could be useful, which column you should apply to?\n3.  what will you get when you pass the result of `cut()` to `as.numeric()`?\n4.  use `case_when()` to re-calssify the result of step 3.\n5.  based on which columns should you classify? what are your group columns for `group_by`?\n:::\n\n::: {.callout-tip collapse=\"true\"}\n# click for answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %<>% \n  group_by(student,plot_id,var) %>% \n  mutate(type=cut(spike,3) %>% as.numeric(),\n         type=case_when(type==1~\"basal\",\n                        type==2~\"central\",\n                        T~\"apical\"))\n```\n:::\n\n:::\n\ngo to @sec-realclass for more practices.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nHow to plot this half-box plot?\n\n::: {.callout-tip collapse=\"true\"}\n# click for answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggpol)\np <- df%>% \n  ggplot(aes(type,flower,fill=student))+\n  geom_boxjitter(aes(color=student),alpha=.4,\n                 jitter.shape = 21, jitter.color = NA, \n                 jitter.params = list(height = 0, width = 0.04),\n                 outlier.color = NA, errorbar.draw = TRUE)+\n  theme_classic()+\n  theme(strip.background = element_blank(),\n        panel.grid.major.x = element_line(),\n        legend.position = \"bottom\") \n\nprint(p)\n```\n:::\n\n:::\n\n### how to change the order of the box plot?\n\nset the `type` as factor and arrange the `levels` from basal to apical.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n### summarize {#sec-summarylist}\n\n::: {.callout-note appearance=\"simple\"}\nbasic summary of kernel development summ for single spike\n\n-   Sp: total spikelet\n-   Fl: maximum floret\n-   sfl: total floret\n-   kf: total full kernel\n-   kh: total half kernel\n-   ks: total small kernel\n-   kp: potential kernel number (half+pull)\n-   fr: filling rate (full kernel/ floret number)\n-   fc: potential filling rate (potential kernel number/ floret number)\n:::\n\nsee also @sec-application for another example.\n\n\n::: {.cell}\n\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n# click for answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum.df <- df %>% \n  dplyr::group_by(student,var,plot_id,type) %>% \n  dplyr::summarise(\n    Sp=max(spike),#total spikelet\n    Fl=max(flower),# maximum floret \n    sfl=sum(flower),# total floret\n    kf=sum(kernel.full,na.rm = T),# total full kernel\n    kh=sum(kernel.half,na.rm = T),# total half kernel\n    ks=sum(kernel.small,na.rm = T),# total small kernel\n    kp=kf+kh,# potential kernel number \n    fr=kf/sfl,# filling rate \n    fc=kf/kp)#potential filling rate\n```\n:::\n\n:::\n\n### how to visualize the maximum full kernels per spikelet?\n\nFor each spike position, how many maximum full kernels can you have?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n# click for answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf%>% \n  group_by(student,var,plot_id,type,spike) %>% \n  summarise(fertile_flower=max(kernel.full)) %>% \n  ggplot(aes(fertile_flower,spike,color=type))+\n  geom_point()+\n  facet_grid(~student)+\n  theme_classic()+\n  theme(strip.background = element_blank(),\n        panel.grid.major.x = element_line(),\n        legend.position = \"bottom\")+\n  geom_path()\n```\n:::\n\n:::\n\n## Practice on a larger dataset\n\n1.  read `kernel_combine.csv` in folder data using relative path.\n2.  subset column `tiller` which match the pattern `M`.\n\n### how to get overview of unique combinations?\n\nHow can you get the unique combination of `car`,`var`,`nitrogen` and `time`? Which combinations of functions can you use?\n\n::: {.callout-tip collapse=\"true\"}\n## click for answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  group_by(car,var,nitrogen,time) %>% \n  summarise()\n```\n:::\n\n:::\n\n### classify spikelet based on position {#sec-realclass}\n\nsee @sec-classify for definition.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 4,749\nColumns: 12\nGroups: car, var, nitrogen, time, rep, type [681]\n$ car          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ~\n$ nitrogen     <chr> \"n3\", \"n3\", \"n3\", \"n3\", \"n3\", \"n3\", \"n3\", \"n3\", \"n3\", \"n3~\n$ time         <chr> \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1~\n$ var          <chr> \"Pioneer\", \"Alves\", \"Potential\", \"Torrid\", \"Torrid\", \"Alv~\n$ rep          <int> 1, 1, 1, 1, 2, 3, 1, 2, 3, 2, 5, 4, 4, 4, 5, 5, 5, 5, 5, ~\n$ tiller       <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M~\n$ spike        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ~\n$ flower       <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, ~\n$ kernel.full  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ kernel.half  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ kernel.small <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ type         <chr> \"basal\", \"basal\", \"basal\", \"basal\", \"basal\", \"basal\", \"ba~\n```\n:::\n:::\n\n\n### basic summary of kernel development summ for single spike {#sec-application}\n\nsee @sec-summarylist for definition.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 681\nColumns: 15\nGroups: nitrogen, time, var, rep, tiller [227]\n$ nitrogen <chr> \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"~\n$ time     <chr> \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"~\n$ var      <chr> \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\"~\n$ rep      <int> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 1, 1, 1, 2, 2, 2~\n$ tiller   <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"~\n$ type     <chr> \"apical\", \"basal\", \"central\", \"apical\", \"basal\", \"central\", \"~\n$ Sp       <int> 16, 6, 11, 19, 7, 13, 17, 6, 11, 19, 7, 13, 19, 7, 13, 16, 6,~\n$ Fl       <int> 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4~\n$ sfl      <int> 19, 18, 20, 21, 21, 24, 22, 20, 20, 21, 22, 24, 18, 21, 24, 1~\n$ kf       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ kh       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~\n$ ks       <int> 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0~\n$ kp       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ fr       <dbl> 0.5263158, 0.4444444, 0.6500000, 0.6666667, 0.5238095, 0.7500~\n$ fc       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~\n```\n:::\n:::\n\n\n### Data wrangling and plot with facet\n\n::: {.callout-note appearance=\"simple\"}\n-   step1 create long format\n\n1.  create long format `long_format`, combine nitrogen and time, names to \"treatment\" values to \"levels\"\n2.  for each `rep,levels,type,var,spike,treatment` calculate the maximum full kernel and name it `fertile_flower`.\n3.  for each `levels,type,var,spike,treatment` calculate the mean `fertile_flower`.\n:::\n\n::: {.callout-note appearance=\"simple\"}\n-   step2 visualize\n\n1.  subset the value of `fertile_flower`less than 10\n2.  based on this graph, what is `x`, `y`, `color` and `shape`?\n3.  what re the `facet`?\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n## recommendation\n\n[Datavisualization](https://www.data-to-viz.com)\n[Scientific story telling](https://academic.oup.com/jxb/article/72/11/3987/6157936)\n",
    "supporting": [
      "index_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}