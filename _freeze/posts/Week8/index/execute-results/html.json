{
  "hash": "8b7e1ec966a7209b7733d6202568bdc1",
  "result": {
    "markdown": "---\ntitle: \"Week8: Grain development Iv\"\nauthor: \"Tien-Cheng\"\ndate: \"2023-06-06\"\ncategories: [R-intermediate]\n\ntoc-location: left\nnumber-sections: true\nwebsite: \n  sidebar:\n    search: true\nformat:\n  html: \n    grid:\n      sidebar-width: 300px\n      body-width: 1200px\n      margin-width: 100px\n      gutter-width: 1.5rem\n\nreference-location: margin\n---\n\n\n\n\nWelcome to the eighth course! You will learn more about `for-loop` and `data visualization`:\n\n::: callout-note\n# Learning goals\n\n1.  requirements of merging *dataframes*\n2.  *save* or *show* the result of *for loop*\n3.  `ggplot()`\n:::\n\n::: callout-warning\n## Discussion\n\n1. What is the component for-loop? How to check if it works for each element?\n2. what are `long` and `wide`? when to use what?\n:::\n\n## Student's data\n\npractice with files from `data/student`.\n\n### How to save the column names of all files in a directory to a list using for loop?\n\n::: callout-important\n# For loop concept\n![](forloop1.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath <- \"./data/student/\"\nfilenames <- list.files(path,pattern=\".xlsx\")\n#create empty list\ndf <- vector(mode=\"list\",length=length(filenames))\n\nfor(i in 1:length(filenames)){\n  fullpath <- paste0(path,filenames[i])\n  df[[i]] <- xlsx::read.xlsx(fullpath,\n                             sheetIndex = 1) %>% \n    names()\n}\n\ndf \n```\n:::\n\n:::\n\n### Challenge: how to name list elements based on student's name ?\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n$clement\n[1] \"Var\"          \"Plot_Id\"      \"Spikes\"       \"flower\"       \"kernal.full\" \n[6] \"Kernal.half\"  \"kernal.small\"\n\n$hanwenhsu\n[1] \"var\"          \"plot_id\"      \"spike\"        \"flower\"       \"kernel.full\" \n[6] \"kernel.half\"  \"kernel.small\"\n\n$shawon\n[1] \"var\"         \"plot.id\"     \"spike\"       \"flower\"      \"kernel.full\"\n[6] \"kernel.half\" \"NA.\"        \n```\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n# click for answer\n\n::: {.cell}\n\n```{.r .cell-code}\nstudent_name <-   purrr::map_chr(filenames,  ~{\n  .x %>% strsplit(\"_\") %>% unlist() %>% \n    .[4] %>% sub(\".xlsx\",\"\",.)\n}) \nnames(df) <-student_name\ndf\n```\n:::\n\n:::\n\n### Challenge: how to combine all the files row-wise?\nIf you know the column names are different, can you still combine them?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf<- map_dfr(list.files(\"../data/student\"),~{\n  \n  file<- xlsx::read.xlsx(paste0(\"../data/student/\",.x),sheetIndex = 1)\n})\ndf %>% \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 57\nColumns: 15\n$ Var          <chr> \"Capone\", NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,~\n$ Plot_Id      <dbl> 159, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, ~\n$ Spikes       <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17~\n$ flower       <dbl> 1, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, ~\n$ kernal.full  <dbl> 0, 2, 2, 2, 3, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 1, ~\n$ Kernal.half  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ kernal.small <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ var          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\n$ plot_id      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\n$ spike        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\n$ kernel.full  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\n$ kernel.half  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\n$ kernel.small <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\n$ plot.id      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\n$ NA.          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\n```\n:::\n:::\n\nHere are possible steps:\n\n* observe the patterns of column names, how to unify the column names?\n* replace \"kernal\" with \"kernel\"\n* replace \"spikes\" with \"spike\"\n* replace \"plot.id\" with \"plot_id\"\n* how to add the student's name as a column? where should you put it in the for-loop body?\n* how to fill the missing cultivar and plot_id?\n* remove \"na.\" column\ncheck your loop-body with the first element in your range.\n\n::: {.callout-tip collapse=\"true\"}\n# click for answer\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magrittr)\ndf<- map_dfr(list.files(\"../data/student\"),~{\n  \n  student_name <-  .x %>% strsplit(\"_\") %>% unlist() %>% \n    .[4] %>% sub(\".xlsx\",\"\",.)\n  \n  file<- xlsx::read.xlsx(paste0(\"../data/student/\",.x),sheetIndex = 1) %>%  \n    `colnames<-`(stringr::str_to_lower(names(.)))%>% \n    `colnames<-`(gsub(\"kernal\",\"kernel\",names(.))) %>% \n    `colnames<-`(gsub(\"spikes\",\"spike\",names(.)))%>%\n    `colnames<-`(gsub(\"plot.id\",\"plot_id\",names(.))) %>% \n    mutate(student=student_name)\n}) \ndf %<>% mutate(var=\"Capone\",plot_id=159) %>% \n  .[!grepl(\"na.\",names(.))]\ndf %>% glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 57\nColumns: 8\n$ var          <chr> \"Capone\", \"Capone\", \"Capone\", \"Capone\", \"Capone\", \"Capone~\n$ plot_id      <dbl> 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 15~\n$ spike        <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17~\n$ flower       <dbl> 1, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, ~\n$ kernel.full  <dbl> 0, 2, 2, 2, 3, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 1, ~\n$ kernel.half  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ kernel.small <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ student      <chr> \"clement\", \"clement\", \"clement\", \"clement\", \"clement\", \"c~\n```\n:::\n:::\n\n\nThis answer is written in `map_()` series, could you rewrite in for loop?\n::: \n\n### How to visualize the result?\n!! practice to make a draft, what will be the `x` and `y`, what will be the `color`? \n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![Line Plot 1](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![Line Plot 2](index_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n# click for answer\n\n::: {.cell}\n\n```{.r .cell-code}\n# line plot 1\ndf %>% \n  group_by(student,spike) %>% \n  ggplot(aes(flower,spike,color=student))+\n  geom_line(alpha=.5)+\n  theme(legend.position = \"bottom\")\n# line plot 2\ndf %>% \n  group_by(student,spike) %>% \n  ggplot(aes(flower,spike,color=student))+\n  geom_point()+\n  geom_path(alpha=.5)+\n  theme(legend.position = \"bottom\")\n```\n:::\n\n::: \n\n### How to make it a bit more beautiful?\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.callout-tip collapse=\"true\"}\n# click for answer\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  group_by(student,spike) %>% \n  ggplot(aes(flower,spike,color=student))+\n  geom_point()+\n  geom_path(alpha=.5)+\n  facet_grid(~student)+\n  theme_classic()+\n  theme(strip.background = element_blank(),\n        panel.grid.major.x = element_line(),\n        legend.position = \"none\")\n```\n:::\n\n::: \n### How to place kernel-related traits in subplots?\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n1. `pivot_longer()`to collect kernel-related traits\n2. `facet_grid()`\n\n::: {.callout-tip collapse=\"true\"}\n# click for answer\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  pivot_longer(starts_with(\"kernel\"),\n               values_to = \"kernel\",\n               names_to=\"kerneltype\") %>% \n  group_by(student,spike) %>% \n  ggplot(aes(kernel,spike,color=student))+\n  geom_point()+\n  geom_path()+\n  facet_grid(kerneltype~student)+\n  theme_classic()+\n  theme(strip.background = element_blank(),\n        panel.grid.major.x = element_line(),\n        legend.position = \"none\")\n```\n:::\n\n::: \n\n### classify spikelet based on position {#sec-classify}\n\nthe spike of the main shoot was dissected to count the total number of floret in\n\n::: {.callout-note appearance=\"simple\"}\n-   basal 1/3 spikelet from the bottom)\n\n-   central (middle 1/3 of spikelets)\n\n-   apical (1/3 spikelets from the top)\n\n[reference](https://doi.org/10.1016/j.fcr.2020.107908)\n::: \n\ntry to clssify each spike into three classes based on their position.\n\n\n::: {.callout-note appearance=\"simple\"}\n# challenge\n\n1. add new column called `type` using `mutate()`\n2. `cut()` could be useful, which column you should apply to?\n3. what will you get when you pass the result of `cut()` to `as.numeric()`?\n4. use `case_when()` to re-calssify the result of step 3.\n5. based on which columns should you classify? what are your group columns for `group_by`?\n::: \n\n::: {.callout-tip collapse=\"true\"}\n# click for answer\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %<>% \n  group_by(student,plot_id,var) %>% \n  mutate(type=cut(spike,3) %>% as.numeric(),\n         type=case_when(type==1~\"basal\",\n                        type==2~\"central\",\n                        T~\"apical\"))\n```\n:::\n\n:::\n\ngo to @sec-realclass for more practices.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\nHow to plot this half-box plot?\n\n::: {.callout-tip collapse=\"true\"}\n# click for answer\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github('erocoar/ggpol')\nlibrary(ggpol)\np <- df%>% \n  ggplot(aes(type,flower,fill=student))+\n  geom_boxjitter(aes(color=student),alpha=.4,\n                 jitter.shape = 21, jitter.color = NA, \n                 jitter.params = list(height = 0, width = 0.04),\n                 outlier.color = NA, errorbar.draw = TRUE)+\n  theme_classic()+\n  theme(strip.background = element_blank(),\n        panel.grid.major.x = element_line(),\n        legend.position = \"bottom\") \nsuppressWarnings(\n  print(p)\n)\n```\n:::\n\n::: \n\n### how to change the order of the box plot?\nset the `type` as factor and arrange the `levels` from basal to apical.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n### summarize {#sec-summarylist}\n\n::: {.callout-note appearance=\"simple\"}\nbasic summary of kernel development summ for single spike\n\n-   Sp: total spikelet\n-   Fl: maximum floret\n-   sfl: total floret\n-   kf: total full kernel\n-   kh: total half kernel\n-   ks: total small kernel\n-   kp: potential kernel number (half+pull)\n-   fr: filling rate (full kernel/ floret number)\n-   fc: potential filling rate (potential kernel number/ floret number)\n::: \n\nsee also @sec-application for another example.\n\n\n::: {.cell}\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n# click for answer\n\n::: {.cell}\n\n```{.r .cell-code}\nsum.df <- df %>% \n  dplyr::group_by(student,var,plot_id,type) %>% \n  dplyr::summarise(\n    Sp=max(spike),#total spikelet\n    Fl=max(flower),# maximum floret \n    sfl=sum(flower),# total floret\n    kf=sum(kernel.full,na.rm = T),# total full kernel\n    kh=sum(kernel.half,na.rm = T),# total half kernel\n    ks=sum(kernel.small,na.rm = T),# total small kernel\n    kp=kf+kh,# potential kernel number \n    fr=kf/sfl,# filling rate \n    fc=kf/kp)#potential filling rate\n```\n:::\n\n::: \n\n### how to visualize the maximum full kernels per spikelet?\nFor each spike position, how many maximum full kernels can you have?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n# click for answer\n\n::: {.cell}\n\n```{.r .cell-code}\ndf%>% \n  group_by(student,var,plot_id,type,spike) %>% \n  summarise(fertile_flower=max(kernel.full)) %>% \n  ggplot(aes(fertile_flower,spike,color=type))+\n  geom_point()+\n  facet_grid(~student)+\n  theme_classic()+\n  theme(strip.background = element_blank(),\n        panel.grid.major.x = element_line(),\n        legend.position = \"bottom\")+\n  geom_path()\n```\n:::\n\n::: \n\n## Practice on a larger dataset\n\nread `kernel_combine.csv` in folder data using relative path. subset column `tiller` which match pattern `M`.\n\n### how to get overview of unique combinations?\nHow can you get the unique combination of `car`,`var`,`nitrogen` and `time`? Which combinations of functions can you use?\n\n::: {.callout-tip collapse=\"true\"}\n## click for answer\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  group_by(car,var,nitrogen,time) %>% \n  summarise()\n```\n:::\n\n:::\n\n### classify spikelet based on position {#sec-realclass}\n\nsee @sec-classify for definition.\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 4,749\nColumns: 12\nGroups: car, var, nitrogen, time, rep, type [681]\n$ car          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ~\n$ nitrogen     <chr> \"n3\", \"n3\", \"n3\", \"n3\", \"n3\", \"n3\", \"n3\", \"n3\", \"n3\", \"n3~\n$ time         <chr> \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1~\n$ var          <chr> \"Pioneer\", \"Alves\", \"Potential\", \"Torrid\", \"Torrid\", \"Alv~\n$ rep          <int> 1, 1, 1, 1, 2, 3, 1, 2, 3, 2, 5, 4, 4, 4, 5, 5, 5, 5, 5, ~\n$ tiller       <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M~\n$ spike        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ~\n$ flower       <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, ~\n$ kernel.full  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ kernel.half  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ kernel.small <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ~\n$ type         <chr> \"basal\", \"basal\", \"basal\", \"basal\", \"basal\", \"basal\", \"ba~\n```\n:::\n:::\n\n\n### basic summary of kernel development summ for single spike {#sec-application}\n\nsee @sec-summarylist for definition.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 681\nColumns: 15\nGroups: nitrogen, time, var, rep, tiller [227]\n$ nitrogen <chr> \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"~\n$ time     <chr> \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"~\n$ var      <chr> \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\"~\n$ rep      <int> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 1, 1, 1, 2, 2, 2~\n$ tiller   <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"~\n$ type     <chr> \"apical\", \"basal\", \"central\", \"apical\", \"basal\", \"central\", \"~\n$ Sp       <int> 16, 6, 11, 19, 7, 13, 17, 6, 11, 19, 7, 13, 19, 7, 13, 16, 6,~\n$ Fl       <int> 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4~\n$ sfl      <int> 19, 18, 20, 21, 21, 24, 22, 20, 20, 21, 22, 24, 18, 21, 24, 1~\n$ kf       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ kh       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~\n$ ks       <int> 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0~\n$ kp       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ fr       <dbl> 0.5263158, 0.4444444, 0.6500000, 0.6666667, 0.5238095, 0.7500~\n$ fc       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~\n```\n:::\n:::\n\n\n### Data wrangling and plot with facet\n\n::: {.callout-note appearance=\"simple\"}\n* step1 create long format\n1. create long format `long_format`, combine nitrogen and time, names to \"treatment\" values to \"levels\"\n2. for each `rep,levels,type,var,spike,treatment` \ncalculate the maximum full kernel and name it `fertile_flower`.\n3. for each `levels,type,var,spike,treatment` \ncalculate the mean `fertile_flower`.\n::: \n\n::: {.callout-note appearance=\"simple\"}\n\n* step2 visualize \n1. subset the value of `fertile_flower`less than 10 \n2. based on this graph, what is `x`, `y`, `color` and `shape`?\n3. what re the `facet`?\n::: \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n## recommendation\n\n[Advanced R: control flow](https://adv-r.hadley.nz/control-flow.html)",
    "supporting": [
      "index_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}