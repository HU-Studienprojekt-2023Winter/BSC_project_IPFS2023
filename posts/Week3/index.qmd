---
title: "Week3: Spikelet development"
author: "Tien-Cheng"
date: "2023-05-02"
categories: [R-basic]
toc: true
number-sections: true
website: 
  sidebar:
    search: true
format:
  html: 
    # code-fold: true
    html-math-method: katex
reference-location: margin
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(magrittr);suppressWarnings(library(dplyr));
suppressWarnings(library(ggplot2));library(tidyr);
library(kableExtra);library(knitr);library(purrr)
options(dplyr.summarise.inform = FALSE)
data <- read.csv("../data/ear_summarized.csv")
dat <-read.csv('../data/kernel_combine.csv',
               header = T,stringsAsFactors = F) %>%
  dplyr::filter(tiller=="M")
```

Welcome to the third course! During the following 2 hrs, you will learn `ggplot` and `dataframe` wrangling:

::: {.callout-note}
# Learning goals
1.  data frame warngling
2.  ggplot2
:::

### practice dataframe with real data

```{r,eval=FALSE}
df <- data.frame(time=as.Date("2023-04-16",format="%Y-%m-%d")+seq(1,3,1),
                 temp=c(20,15,13), 
                 thermal_time=cumsum(c(20,15,13)))
df %>% dplyr::glimpse() 
names(df)
# extract column from dataframe
df$thermal_time
df[,3]
df[,'thermal_time']

df[['thermal_time']]

# not work
df[thermal_time]
# different error message
#!! name space conflict
df[time]
time

# summarize dataframe
lapply(df, range)
# turn as data frame
lapply(df, range) %>% data.frame()

summary(df)

```
::: {.callout-note}
Practice with large data set `ear_summarized.csv` in folder `data`.

0.  read the file with relative path using function `read.csv()`.
1.  find the row and column number of data frame by `rown` and `coln`
2.  check the range of each column using `lapply`, how many unique days exist in column `date`
3.  compare the result of `glimpse` and `str`
4.  extract column `weight` using `[]`,`[[]]`and `$` [^extract]
5.  what is the function of `head()` and `tail()`?
6.  how to extract the first three row using `[]`? 
:::

[^extract]: You can subset `dataframe` by indexing \[`row`,`column`\]
`dataframe`\[,`column`\] select the whole role for selected columnn
`dataframe`\[`row`,\] select the whole column of selected rows
# ```{r,eval=FALSE}
# data <- read.csv("data/ear_summarized.csv")
# ```

## dplyr

### Subset row(s)
`dplyr::filter()`: extract row where the condition matched.  [^meaning]

[^meaning]:`r_package::function_name` specify the function name by package name.`::` has similar meaning like "from".
It is useful to avoid name space conflict when same function name is used by multiple library that you are using.

e.g., extract `temp` where `time` is `2023-04-17` in `df`.
```{r,eval=FALSE}
# df$time %>% str()
df %>% dplyr::filter(time=='2023-04-17') %>% .$temp
df %>% dplyr::filter(time==as.Date('2023-04-17')) %>% .$temp
```

### Add column(s)

`dplyr::mutate()`: add one or multiple columns to dataframe.

e.g., add column`Year` to `df`, its value is `'2023'`.

```{r,eval=FALSE}
# result is not save
df %>% dplyr::mutate(Year="2023") 
df
# result is saved
df$Year <- "2023"
df[['Year']] <- "2023"
df
```
::: {.callout-note}
How to save result using `%>%`?
Check example with `?mutate`.
::: 

### Combine dataframes by column.

```{r,eval=FALSE}
df <- data.frame(time=as.Date("2023-04-16",format="%Y-%m-%d")+seq(1,3,1),
                 temp=c(20,15,13), 
                 thermal_time=cumsum(c(20,15,13)))
# with same length dataframe
ear_df <- data.frame(time=as.Date("2023-04-16",format="%Y-%m-%d")+seq(1,3,1),
                     ear_weight=c(20,40,50))
merge(df,ear_df,by="time")
dplyr::left_join(df,ear_df,by="time")
# combind with vector of same length 
cbind(df, ear_weight=c(20,40,50))
df$ear_weight <- c(20,40)

# with differnt length 
short_ear_df <- data.frame(time=as.Date("2023-04-16",format="%Y-%m-%d")+seq(1,2,1),
                           ear_weight=c(20,40))
merge(df,short_ear_df,by="time")
dplyr::left_join(df,short_ear_df,by="time")

# combind with vector of different length 
cbind(df, ear_weight=c(20,40))
df$ear_weight <- c(20,40)

```
::: {.callout-note}
Check description of `merge` and `left_join`, how are they different from each other?
What happen if you remove the argument `by`?
::: 
## GGplot2
### ggplot grammar: layer-wise commands 

[![layers of ggplot: click picture for original source ](Rpubs.png)](https://api.rpubs.com/NemiVoraR/511391)

![symbol, aes & ...](GGplot.png)

Top layer `ggplot()`and sub-layers `sublayer_command()`, they are separated by `+`.

Within each layer, there may be an aesthetic function `aes()` to set aesthetic setting like `x`,`y` and `color`,`fill` or `shape`. 
Function `ggplot()` will not generate any graph but used for setting common aesthetic setting across the sub-layer. Plot type are specify in sub-layer with prefix `geom_xx`. 

::: {.callout-important}
##  order matters!
If there are conflicts between the sub-layer commands, the latter will overwrite the previous one!
::: 

### Requirements of scientific plot.

1.  axis title: specify with unit if there is any using `xlab()` or `ylab()`.

2.  legend title: full name instead of default abbreviation using `guides()`.

3.  other important rules: [^2].

[^2]: [Ten simple rules for better figures](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003833)
[How to Make Good Graphs and Figures for Scientific Papers](https://www.simplifiedsciencepublishing.com/resources/how-to-make-good-graphs-and-figures-for-scientific-papers)

```{r,eval=FALSE}
# Watch out the names!
library(ggplot)
library(ggplot2)
```

```{r}
#| label: fig-growth
#| fig-cap: "Growth of ear weight over time."
#| fig-width: 12
#| fig-height: 3.5

data %>% 
  ggplot(aes(x=date,y=weight,color=var))+
  geom_point()+
  geom_line(aes(group=group))+ # link the point by group.
  xlab("date of harvest")+ #x axis title
  ylab("ear weight(g)")+   #y axis title
  guides(color=guide_legend(title="Cultivar")) #change legend title 
```

::: {.callout-tip collapse="true"}
## challenge : use `theme_xx()` function series to change background of the plot. Click for example.
```{r,echo=FALSE}
#| fig-cap: "dark theme example."
#| fig-width: 12
#| fig-height: 3.5

data %>% 
  ggplot(aes(x=date,y=weight,color=var))+
  geom_point()+
  geom_line(aes(group=group))+ # link the point by group.
  xlab("date of harvest")+ #x axis title
  ylab("ear weight(g)")+   #y axis title
  guides(color=guide_legend(title="Cultivar"))+ #change legend title +
  theme_dark()
```
:::

factors, levels, for loop, long to wide, wide to long 

## Recommendations 

### online tutorials:
[ggplot datacamp](https://www.datacamp.com/cheat-sheet/ggplot2-cheat-sheet)
[ggplot 2](https://ggplot2.tidyverse.org)
[ggplot gallery](https://r-graph-gallery.com)

### online books: 
[ggplot cheatsheet](https://www.maths.usyd.edu.au/u/UG/SM/STAT3022/r/current/Misc/data-visualization-2.1.pdf)
[Data visualization with R](https://rkabacoff.github.io/datavis/)
[R for Data Science: Chapter3 Visualization](https://r4ds.had.co.nz/data-visualisation.html)