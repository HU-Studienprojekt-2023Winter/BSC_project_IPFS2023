{
  "hash": "f692526d16cbf4e310958943e18648d4",
  "result": {
    "markdown": "---\ntitle: \"Week5: Grain development II\"\nauthor: \"Tien-Cheng\"\ndate: \"2023-05-16\"\ncategories: [R-intermediate]\n\ntoc-location: left\n# number-sections: true\nwebsite: \n  sidebar:\n    search: true\nformat:\n  html: \n    grid:\n      sidebar-width: 300px\n      body-width: 900px\n      margin-width: 300px\n      gutter-width: 1.5rem\n\nreference-location: margin\n---\n\n\n\n\nWelcome to the fifth course! You will learn more about `dataframe` wrangling:\n\n::: callout-note\n# Learning goals\n\n1.  data frame wrangling with `dplyr` and `tidyr`\n2.  for loop\n:::\n\n::: callout-warning\n## Discussion\n\n1. What is the component of `function()`? How could you document them?\n2. What is the characteristics of `dataframe`?\n3. How many ways could you match a cell in `dataframe`? which functions are available?\n4. What is `for` loop?\n5. What `operators` can you use for matching condition?\n6. What is function of `mutate()` and `filter()`?\n7. What is the difference between `\".\"` and `.`?\n8. What is relative path? \n9. What is `namespace`?\n:::\n\n## more mutate examples\n\nLast week's practice.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- expand.grid(x=letters[1:4],\n                  y=1:2)%>%\n  # combine columns x and y \n  mutate(z=interaction(x,y))\nrownames(df) <- LETTERS[1:nrow(df)]\n```\n:::\n\n\n### replace column\n\n#### replace one column based on single condition\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% mutate(k=ifelse(x==\"a\",\"A\",\"B\"))\ndf %>% mutate(k=ifelse(y==1,\"A\",\"B\"))\ndf %>% mutate(k=case_when(x==\"a\"~\"A\",\n                          TRUE~\"B\"))\n```\n:::\n\n::: callout-warning\n## practice \nMatching multiple conditions\n\nadd column `k` to `df`, when the condition x equals \"a\" `and` y equals 1.\n\n:::\n\n#### replace one column based on multiple conditions\n\nin `case_when` syntax, `TRUE` before `~` stands for the `else` conditions.\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% mutate(k=case_when(x==\"a\"~\"A\",\n                          x==\"b\"~\"B\",\n                          TRUE~\"C\"))\n```\n:::\n\n\n#### Look up table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlook_table <- data.frame(x=letters,\n                         X=LETTERS)\ndf %>% merge(look_table)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x y   z X\n1 a 1 a.1 A\n2 a 2 a.2 A\n3 b 1 b.1 B\n4 b 2 b.2 B\n5 c 1 c.1 C\n6 c 2 c.2 C\n7 d 1 d.1 D\n8 d 2 d.2 D\n```\n:::\n:::\n\n\n::: callout-warning\n## practice\n\n`merge` is not actually replace the original column. \n\nWrite a function to replace `letters` with `LETTERS`.\nThe input is a vector of lower case vector `vec <- c(\"c\",\"a\",\"b\",\"d\")`, output will be the matched upper case vector `c(\"C\",\"A\",\"B\",\"D\")`. \n\n!!Before you start to write the code, please first write down the possible steps in text.!!\n:::\n\n### advanced mutate add-on :across\n\napply function for multiple columns\n\nacross( `column_name (e.g., \"y\")` or `column_position (e.g., 2)`,FUNCTION)\n\nFUNCTION examples\n\n1.  `function(x){x +1}`\n\nsyntax: `~{.x+1}`\n\n2.  `function(x){mean(x, ...)}`\n\nsyntax: `~{mean(.x,...)}`\n\n`...` means the additional option other than the first input argument. For example, `...` could be `na.rm=True`.\n\nNow here is one example of applying function to multiple columns  \n\n::: {.cell}\n\n```{.r .cell-code}\nclimate %>% \n  select(ends_with(\"Temperature\")) %>% \n  head(.,3) %>%\n  glimpse()\n\n\nclimate %>% \n  mutate(across(where(is.numeric),~{round(.x, digits = 2)})) %>%\n  # mutate(across(where(is.numeric),function(x){round(x, digits = 2)})) %>%\n  select(ends_with(\"Temperature\")) %>% \n  head(.,3) %>% \n  glimpse()\n\n# reduce your code chunk by using function\ndisplay <- function(x){\n  # subset dataframe and summarized for displaying purporse\n  # x: input data frame\n  x %>% \n    dplyr::select(ends_with(\"Temperature\")) %>% \n    head(.,3) %>% \n    dplyr::glimpse()\n}\n\nclimate %>% \n  mutate(across(where(is.numeric),~{round(.x, digits = 2)})) %>%\n  display()\n```\n:::\n\n\n## Conclude your dataframe by groups\n\n![](wrangling.png)\n\n### group_by()\n\nLearn from [examples](https://dplyr.tidyverse.org/reference/group_by.html)!\n\n::: callout-warning\n## practice\n\n1.  read `climate.csv` from `data` folder using relative path\n2.  find the sowing date (i.e., the first date) for each year (`DFG_year`) and each sowing treatment(`sowing_date`).\n3.  calculate thermal time based on `DailyMean_Temperature`\n:::\n\n### how to get the minimum unique combination of dataframe?\n\nhow many unique year-months combinations were included in \\`climate 2019 for early and late sowing?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate %>% \n  dplyr::filter(DFG_year==\"DFG2019\") %>% \n  group_by(y,m) %>% \n  summarise()\n\nclimate %>% \n  dplyr::filter(DFG_year==\"DFG2019\") %>% \n  dplyr::select(y,m) %>% \n  dplyr::distinct()\n```\n:::\n\n\n### wide to long\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate %>%names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"DayTime\"                \"y\"                      \"m\"                     \n [4] \"d\"                      \"DailyMean_Temperature\"  \"Acc_Temperature\"       \n [7] \"Acc_Percipitation\"      \"Acc_Radiation\"          \"DailySum_Percipitation\"\n[10] \"DailySum_Radiation\"     \"sowing_date\"            \"DFG_year\"              \n```\n:::\n\n```{.r .cell-code}\nclimate_long <- climate %>% \n  tidyr::pivot_longer(names_to = \"Daily_Terms\",\n                      values_to = \"Daily_value\",\n                      cols = contains(\"Daily\")) \nclimate_long%>% \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"DayTime\"           \"y\"                 \"m\"                \n [4] \"d\"                 \"Acc_Temperature\"   \"Acc_Percipitation\"\n [7] \"Acc_Radiation\"     \"sowing_date\"       \"DFG_year\"         \n[10] \"Daily_Terms\"       \"Daily_value\"      \n```\n:::\n:::\n\n\n### long to wide\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclimate %>%names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"DayTime\"                \"y\"                      \"m\"                     \n [4] \"d\"                      \"DailyMean_Temperature\"  \"Acc_Temperature\"       \n [7] \"Acc_Percipitation\"      \"Acc_Radiation\"          \"DailySum_Percipitation\"\n[10] \"DailySum_Radiation\"     \"sowing_date\"            \"DFG_year\"              \n```\n:::\n\n```{.r .cell-code}\nclimate_long <- climate %>% \n  tidyr::pivot_longer(names_to = \"Daily_Terms\",\n                      values_to = \"Daily_value\",\n                      cols = contains(\"Daily\"))\nclimate_long%>% \n  tidyr::pivot_wider(names_from = \"Daily_Terms\",\n                     values_from = \"Daily_value\")%>% \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"DayTime\"                \"y\"                      \"m\"                     \n [4] \"d\"                      \"Acc_Temperature\"        \"Acc_Percipitation\"     \n [7] \"Acc_Radiation\"          \"sowing_date\"            \"DFG_year\"              \n[10] \"DailyMean_Temperature\"  \"DailySum_Percipitation\" \"DailySum_Radiation\"    \n```\n:::\n:::\n\n\n<!-- ### Protocols of making a regression plot -->\n\n<!-- [![Click to read original article](Protocol.jpg)](https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/2041-210X.12577) -->\n## For loop\nuse for loop for repetitive tasks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilename <- c('grain_counting_practice_studentName1.xlsx',\n              'grain_counting_practice_studentName2.xlsx')\nfile_list<- filename %>% strsplit(\"_\")\n# tradition way of for loop\nres <- c()\nfor(i in 1:2){\n  res <- c(res,file_list[[i]][4])\n}\n\n# alternative in r package purrr\n# chr stands for the \"character\" output.\npurrr::map_chr(1:length(file_list),  ~{\n  file_list[[.x]][4]\n})\n\n# notice that the output of map_chr must be 1 element per iteration.\npurrr::map_chr(filename,  ~{\n  .x %>% strsplit(\"_\") %>% unlist()\n})\n\n# equivalent\npurrr::map(filename,  ~{\n  .x %>% strsplit(\"_\") %>% unlist()\n})\n\nlapply(filename,function(x){\n  x %>% strsplit(\"_\") %>% unlist()\n})\n```\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n## challenge\nUsing for loop,\ncreate a vector contained only the student name but replace the `\".xlsx\"` suffix.\nSearch on google. What would be your `keyword`?\n:::\n\n## Spikelet position practice\n\n### read real data\nread kernel_combine.csv in folder data using relative path. subset column `tiller` which match pattern `M`.\n\nHow can you get the unique combination of `car`,`var`,`nitrogen` and `time`? Which combinations of functions can you use?\n\n\n::: {.callout-note collapse=\"true\"}\n## challenge\n\n::: {.cell}\n\n```{.r .cell-code}\ndat %>% \n  group_by(car,var,nitrogen,time) %>% \n  summarise()\n```\n:::\n\n:::\n\n### read your own data\nGo to [HU-box](https://box.hu-berlin.de/d/fc7db144021a4a35a086/), download the `student` folder. \n\n::: callout-warning\n### Practice\n1. list the file name in the folder using relative path\n2. read the file based on the name listed.\n3. add a column containing student name information\n4. combined the result in one\n:::\n\n\n::: callout-warning\n### Practice\n1. do data summary for each file, compare the range of three files.\n2. Visualize it with ggplot, differentiate the data from each student by `color`.\n:::\n\n\n### classify spikelet based on position\n\nthe spike of the main shoot was dissected to count the total number of floret in\n\n-   basal (third-fifth spikelet from the bottom)\n\n-   central (middle spikelets)\n\n-   apical (third-fifth spikelet from the top) spikelets throughout the spike [reference](https://doi.org/10.1016/j.fcr.2020.107908)\n\n\n::: {.cell}\n\n:::\n\n\n### basic summary of kernel development summ for single spike\n\n-   Sp: total spikelet\n-   Fl: maximum floret\n-   sfl: total floret\n-   kf: total full kernel\n-   kh: total half kernel\n-   ks: total small kernel\n-   kp: potential kernel number\n-   fr: filling rate\n-   fc: potential filling rate\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nRows: 681\nColumns: 15\nGroups: nitrogen, time, var, rep, tiller [227]\n$ nitrogen <chr> \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"n1\", \"~\n$ time     <chr> \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"t1\", \"~\n$ var      <chr> \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\", \"Alves\"~\n$ rep      <int> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 1, 1, 1, 2, 2, 2~\n$ tiller   <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"~\n$ type     <chr> \"apical\", \"basal\", \"central\", \"apical\", \"basal\", \"central\", \"~\n$ Sp       <int> 16, 6, 11, 19, 7, 13, 17, 6, 11, 19, 7, 13, 19, 7, 13, 16, 6,~\n$ Fl       <int> 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4~\n$ sfl      <int> 19, 18, 20, 21, 21, 24, 22, 20, 20, 21, 22, 24, 18, 21, 24, 1~\n$ kf       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ kh       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~\n$ ks       <int> 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0~\n$ kp       <int> 10, 8, 13, 14, 11, 18, 13, 11, 15, 12, 12, 17, 9, 12, 17, 2, ~\n$ fr       <dbl> 0.5263158, 0.4444444, 0.6500000, 0.6666667, 0.5238095, 0.7500~\n$ fc       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1~\n```\n:::\n:::\n\n\n### Data wrangling and plot with facet\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}